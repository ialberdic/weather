{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar empty = function empty(v) {\n  return v.replace(/\\s/g, '').length ? false : true;\n};\n\nvar number = function number(v) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 999999999999;\n\n  if (!isNumeric(v)) {\n    return false;\n  }\n\n  return v < min || v > max ? false : true;\n}; // TODO: find a better type for regex\n\n\nvar reg = function reg(_reg, v) {\n  var err = true;\n\n  if (_reg.test(v)) {\n    err = false;\n  }\n\n  return err;\n};\n\nvar isNumeric = function isNumeric(v) {\n  return !isNaN(parseFloat(v)) && isFinite(v);\n};\n\nvar validator = {\n  reg: reg,\n  empty: empty,\n  number: number\n};\nvar _default = validator;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}