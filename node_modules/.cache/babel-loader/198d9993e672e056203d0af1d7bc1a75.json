{"ast":null,"code":"/* global window navigator fetch */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' // [::1] is the IPv6 localhost address.\n|| window.location.hostname === '[::1]' // 127.0.0.1/8 is considered localhost for IPv4.\n|| window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (reg) {\n    var registration = reg;\n\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit http://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/home/ialberdi/projects/weather/src/web/register-service-worker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","reg","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener"],"mappings":"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","sourcesContent":["/* global window navigator fetch */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((reg) => {\n            const registration = reg;\n\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                                + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n                || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n                        + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}  "]},"metadata":{},"sourceType":"module"}