{"ast":null,"code":"import _objectSpread from \"/home/ialberdi/projects/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport Store from '../store/weather';\nexport var initialState = Store;\nexport default function recipeReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.data) {\n    switch (action.type) {\n      case 'GET_CELSIUS_DEGREES':\n        {\n          var weather = []; // Pick out the props I need\n\n          weather = action.data.list.map(function (item, index) {\n            return {\n              id: action.data.city.name + index,\n              date: item.dt_txt,\n              minTemp: item.main.temp_min,\n              maxTemp: item.main.temp_max,\n              temp: item.main.temp\n            };\n          });\n          return _objectSpread({}, state, {\n            weather: weather\n          });\n        }\n\n      case 'GET_FARENHEIT_DEGREES':\n        {\n          var _weather = []; // Pick out the props I need\n\n          _weather = action.data.listmap(function (item, index) {\n            return {\n              id: action.data.city.name + index,\n              date: item.dt_txt,\n              minTemp: item.main.temp_min,\n              maxTemp: item.main.temp_max,\n              temp: item.main.temp\n            };\n          });\n          return _objectSpread({}, state, {\n            weather: _weather\n          });\n        }\n\n      default:\n        return state;\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/ialberdi/projects/weather/src/reducers/weather.js"],"names":["Store","initialState","recipeReducer","state","action","data","type","weather","list","map","item","index","id","city","name","date","dt_txt","minTemp","main","temp_min","maxTemp","temp_max","temp","listmap"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,OAAO,IAAMC,YAAY,GAAGD,KAArB;AAEP,eAAe,SAASE,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBF,YAAsB;AAAA,MAARG,MAAQ;;AAElE,MAAIA,MAAM,CAACC,IAAX,EAAiB;AAEf,YAAQD,MAAM,CAACE,IAAf;AAEE,WAAK,qBAAL;AAA4B;AAE1B,cAAIC,OAAO,GAAG,EAAd,CAF0B,CAI1B;;AAEAA,UAAAA,OAAO,GAAGH,MAAM,CAACC,IAAP,CAAYG,IAAZ,CAAiBC,GAAjB,CAAqB,UAACC,IAAD,EAAOC,KAAP;AAAA,mBAAkB;AAC/CC,cAAAA,EAAE,EAAER,MAAM,CAACC,IAAP,CAAYQ,IAAZ,CAAiBC,IAAjB,GAAwBH,KADmB;AAE/CI,cAAAA,IAAI,EAAEL,IAAI,CAACM,MAFoC;AAG/CC,cAAAA,OAAO,EAAEP,IAAI,CAACQ,IAAL,CAAUC,QAH4B;AAI/CC,cAAAA,OAAO,EAAEV,IAAI,CAACQ,IAAL,CAAUG,QAJ4B;AAK/CC,cAAAA,IAAI,EAAEZ,IAAI,CAACQ,IAAL,CAAUI;AAL+B,aAAlB;AAAA,WAArB,CAAV;AAQA,mCACKnB,KADL;AAEEI,YAAAA,OAAO,EAAPA;AAFF;AAID;;AAED,WAAK,uBAAL;AAA8B;AAC5B,cAAIA,QAAO,GAAG,EAAd,CAD4B,CAG5B;;AAEAA,UAAAA,QAAO,GAAGH,MAAM,CAACC,IAAP,CAAYkB,OAAZ,CAAoB,UAACb,IAAD,EAAOC,KAAP;AAAA,mBAAkB;AAC9CC,cAAAA,EAAE,EAAER,MAAM,CAACC,IAAP,CAAYQ,IAAZ,CAAiBC,IAAjB,GAAwBH,KADkB;AAE9CI,cAAAA,IAAI,EAAEL,IAAI,CAACM,MAFmC;AAG9CC,cAAAA,OAAO,EAAEP,IAAI,CAACQ,IAAL,CAAUC,QAH2B;AAI9CC,cAAAA,OAAO,EAAEV,IAAI,CAACQ,IAAL,CAAUG,QAJ2B;AAK9CC,cAAAA,IAAI,EAAEZ,IAAI,CAACQ,IAAL,CAAUI;AAL8B,aAAlB;AAAA,WAApB,CAAV;AAQA,mCACKnB,KADL;AAEEI,YAAAA,OAAO,EAAPA;AAFF;AAID;;AAED;AACE,eAAOJ,KAAP;AA1CJ;AA4CD;;AACD,SAAOA,KAAP;AACD","sourcesContent":["import Store from '../store/weather';\n\nexport const initialState = Store;\n\nexport default function recipeReducer(state = initialState, action) {\n\n  if (action.data) {\n\n    switch (action.type) {\n\n      case 'GET_CELSIUS_DEGREES': {\n        \n        let weather = [];\n\n        // Pick out the props I need\n\n        weather = action.data.list.map((item, index) => ({\n          id: action.data.city.name + index,\n          date: item.dt_txt,\n          minTemp: item.main.temp_min,\n          maxTemp: item.main.temp_max,\n          temp: item.main.temp\n        }));\n\n        return {\n          ...state,\n          weather,\n        };\n      }\n\n      case 'GET_FARENHEIT_DEGREES': {\n        let weather = [];\n\n        // Pick out the props I need\n\n        weather = action.data.listmap((item, index) => ({\n          id: action.data.city.name + index,\n          date: item.dt_txt,\n          minTemp: item.main.temp_min,\n          maxTemp: item.main.temp_max,\n          temp: item.main.temp\n        }));\n\n        return {\n          ...state,\n          weather,\n        };\n      }\n\n      default:\n        return state;\n    }\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}