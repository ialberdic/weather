{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty = function defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar toConsumableArray = function toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar classCallCheck$1 = function classCallCheck$$1(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends$1 = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits$1 = function inherits$$1(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties$1 = function objectWithoutProperties$$1(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn$1 = function possibleConstructorReturn$$1(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray$1 = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar currentFiber = void 0; // Utils\n\nvar leaseHook = function leaseHook() {\n  if (!currentFiber) {\n    throw new Error('You are trying to use hooks without the `useHooks()` HOC!');\n  }\n\n  var hooks = currentFiber.hooks;\n  var index = currentFiber.hookIndex;\n  currentFiber.hookIndex++;\n  return [hooks, index, currentFiber];\n};\n\nfunction useHooks(fn) {\n  var HookComponent = function (_React$Component) {\n    inherits$1(HookComponent, _React$Component);\n\n    function HookComponent() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      classCallCheck$1(this, HookComponent);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = possibleConstructorReturn$1(this, (_ref = HookComponent.__proto__ || Object.getPrototypeOf(HookComponent)).call.apply(_ref, [this].concat(args))), _this), _this.hooks = [], _temp), possibleConstructorReturn$1(_this, _ret);\n    }\n\n    createClass$1(HookComponent, [{\n      key: 'componentDidMount',\n      // A home for our hooks\n      // These are here to ensure effects work properly\n      value: function componentDidMount() {\n        this.hooks.forEach(function (hook) {\n          if (hook.didMount) {\n            hook.didMount();\n          }\n        });\n      }\n    }, {\n      key: 'componentDidUpdate',\n      value: function componentDidUpdate() {\n        this.hooks.forEach(function (hook) {\n          if (hook.didUpdate) {\n            hook.didUpdate();\n          }\n        });\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        this.hooks.forEach(function (hook) {\n          if (hook.willUnmount) {\n            hook.willUnmount();\n          }\n        });\n        this.hooks = undefined;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _props = this.props,\n            innerRef = _props.innerRef,\n            rest = objectWithoutProperties$1(_props, ['innerRef']); // Every render, we need to update the\n        // currentFiber to the class's instance\n        // and reset the instance's hookIndex\n\n        currentFiber = this;\n        this.hookIndex = 0;\n        var res = fn(rest, innerRef);\n        currentFiber = null;\n        return res;\n      }\n    }]);\n    return HookComponent;\n  }(React.Component);\n\n  HookComponent.displayName = fn.displayName || fn.name;\n\n  function HookWrapper(props, ref) {\n    return React.createElement(HookComponent, _extends$1({}, props, {\n      innerRef: ref\n    }));\n  }\n\n  Object.keys(fn).forEach(function (key) {\n    HookWrapper[key] = fn[key];\n  });\n  return HookWrapper;\n}\n\nfunction useRef(initialValue) {\n  var _leaseHook = leaseHook(),\n      _leaseHook2 = slicedToArray$1(_leaseHook, 2),\n      hooks = _leaseHook2[0],\n      hookID = _leaseHook2[1];\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = {\n      current: initialValue\n    };\n  }\n\n  return hooks[hookID];\n}\n\nfunction useReducer(reducer, initialState) {\n  var _leaseHook3 = leaseHook(),\n      _leaseHook4 = slicedToArray$1(_leaseHook3, 3),\n      hooks = _leaseHook4[0],\n      hookID = _leaseHook4[1],\n      instance = _leaseHook4[2];\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = {\n      state: initialState,\n      dispatch: function dispatch(action) {\n        hooks[hookID].state = reducer(hooks[hookID].state, action);\n        instance.forceUpdate();\n      }\n    };\n  }\n\n  return [hooks[hookID].state, hooks[hookID].dispatch];\n}\n\nfunction useState(initialState) {\n  return useReducer(function (state, action) {\n    return typeof action === 'function' ? action(state) : action;\n  }, initialState);\n}\n\nfunction useContext(context) {\n  var _leaseHook5 = leaseHook(),\n      _leaseHook6 = slicedToArray$1(_leaseHook5, 3),\n      hooks = _leaseHook6[0],\n      hookID = _leaseHook6[1],\n      instance = _leaseHook6[2];\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = context;\n    var originalRender = instance.render.bind(instance);\n\n    instance.render = function () {\n      return React.createElement(context.Consumer, null, originalRender);\n    };\n  }\n\n  return context._currentValue;\n}\n\nfunction useMemo(memo, watchItems) {\n  var _leaseHook9 = leaseHook(),\n      _leaseHook10 = slicedToArray$1(_leaseHook9, 2),\n      hooks = _leaseHook10[0],\n      hookID = _leaseHook10[1];\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = {\n      watchItems: null,\n      computed: null\n    };\n  }\n\n  var needsUpdate = hasChanged(hooks[hookID].watchItems, watchItems);\n\n  if (needsUpdate) {\n    hooks[hookID].watchItems = watchItems;\n    hooks[hookID].computed = memo();\n  }\n\n  return hooks[hookID].computed;\n}\n\nfunction useEffect(effect, watchItems) {\n  var _leaseHook11 = leaseHook(),\n      _leaseHook12 = slicedToArray$1(_leaseHook11, 2),\n      hooks = _leaseHook12[0],\n      hookID = _leaseHook12[1];\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = {\n      changed: false,\n      watchItems: null,\n      unwinder: null,\n      effect: null,\n      didMount: function didMount() {\n        hooks[hookID].unwind = hooks[hookID].effect();\n      },\n      didUpdate: function didUpdate() {\n        if (hooks[hookID].changed) {\n          if (hooks[hookID].unwind) {\n            hooks[hookID].unwind();\n          }\n\n          hooks[hookID].unwind = hooks[hookID].effect();\n        }\n      },\n      willUnmount: function willUnmount() {\n        if (hooks[hookID].unwind) {\n          hooks[hookID].unwind();\n        }\n      }\n    };\n  }\n\n  hooks[hookID].effect = effect;\n  hooks[hookID].changed = false;\n  var changed = hasChanged(hooks[hookID].watchItems, watchItems);\n\n  if (changed) {\n    hooks[hookID].changed = true;\n    hooks[hookID].watchItems = watchItems;\n  }\n}\n\nvar useLayoutEffect = useEffect; // Utils\n\nfunction hasChanged(prev, next) {\n  var needsUpdate = !prev;\n\n  if (!needsUpdate && prev.length !== next.length) {\n    needsUpdate = true;\n  } else if (!needsUpdate && prev.some(function (item, index) {\n    return item !== next[index];\n  })) {\n    needsUpdate = true;\n  }\n\n  return needsUpdate;\n}\n\nvar ChartContext = React.createContext();\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar performanceNow = createCommonjsModule(function (module) {\n  // Generated by CoffeeScript 1.12.2\n  (function () {\n    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n    if (typeof performance !== \"undefined\" && performance !== null && performance.now) {\n      module.exports = function () {\n        return performance.now();\n      };\n    } else if (typeof process !== \"undefined\" && process !== null && process.hrtime) {\n      module.exports = function () {\n        return (getNanoSeconds() - nodeLoadTime) / 1e6;\n      };\n\n      hrtime = process.hrtime;\n\n      getNanoSeconds = function getNanoSeconds() {\n        var hr;\n        hr = hrtime();\n        return hr[0] * 1e9 + hr[1];\n      };\n\n      moduleLoadTime = getNanoSeconds();\n      upTime = process.uptime() * 1e9;\n      nodeLoadTime = moduleLoadTime - upTime;\n    } else if (Date.now) {\n      module.exports = function () {\n        return Date.now() - loadTime;\n      };\n\n      loadTime = Date.now();\n    } else {\n      module.exports = function () {\n        return new Date().getTime() - loadTime;\n      };\n\n      loadTime = new Date().getTime();\n    }\n  }).call(commonjsGlobal);\n});\nvar root = typeof window === 'undefined' ? commonjsGlobal : window,\n    vendors = ['moz', 'webkit'],\n    suffix = 'AnimationFrame',\n    raf = root['request' + suffix],\n    caf = root['cancel' + suffix] || root['cancelRequest' + suffix];\n\nfor (var i = 0; !raf && i < vendors.length; i++) {\n  raf = root[vendors[i] + 'Request' + suffix];\n  caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix];\n} // Some versions of FF have rAF but not cAF\n\n\nif (!raf || !caf) {\n  var last = 0,\n      id = 0,\n      queue = [],\n      frameDuration = 1000 / 60;\n\n  raf = function raf(callback) {\n    if (queue.length === 0) {\n      var _now = performanceNow(),\n          next = Math.max(0, frameDuration - (_now - last));\n\n      last = next + _now;\n      setTimeout(function () {\n        var cp = queue.slice(0); // Clear queue here to prevent\n        // callbacks from appending listeners\n        // to the current frame's queue\n\n        queue.length = 0;\n\n        for (var i = 0; i < cp.length; i++) {\n          if (!cp[i].cancelled) {\n            try {\n              cp[i].callback(last);\n            } catch (e) {\n              setTimeout(function () {\n                throw e;\n              }, 0);\n            }\n          }\n        }\n      }, Math.round(next));\n    }\n\n    queue.push({\n      handle: ++id,\n      callback: callback,\n      cancelled: false\n    });\n    return id;\n  };\n\n  caf = function caf(handle) {\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].handle === handle) {\n        queue[i].cancelled = true;\n      }\n    }\n  };\n}\n\nvar raf_1 = function raf_1(fn) {\n  // Wrap in a new function to prevent\n  // `cancel` potentially being assigned\n  // to the native rAF function\n  return raf.call(root, fn);\n};\n\nvar cancel = function cancel() {\n  caf.apply(root, arguments);\n};\n\nvar polyfill = function polyfill(object) {\n  if (!object) {\n    object = root;\n  }\n\n  object.requestAnimationFrame = raf;\n  object.cancelAnimationFrame = caf;\n};\n\nraf_1.cancel = cancel;\nraf_1.polyfill = polyfill;\nvar Utils$1 = {\n  getStatus: getStatus,\n  getStatusStyle: getStatusStyle,\n  buildStyleGetters: buildStyleGetters,\n  getMultiAnchor: getMultiAnchor,\n  getClosestPoint: getClosestPoint,\n  normalizeGetter: normalizeGetter,\n  isValidPoint: isValidPoint,\n  getAxisByAxisID: getAxisByAxisID,\n  getAxisIndexByAxisID: getAxisIndexByAxisID,\n  sumObjBy: sumObjBy,\n  translateX: translateX,\n  translateY: translateY,\n  translate: translate,\n  identity: identity,\n  throttle: throttle,\n  shallowDiff: shallowDiff\n};\n\nfunction getStatus(item, focused) {\n  var status = {\n    focused: false,\n    otherFocused: false\n  };\n\n  if (!focused) {\n    return status;\n  } // If the item is a datum\n\n\n  if (typeof item.primary !== 'undefined') {\n    var length = focused.group.length;\n\n    for (var i = 0; i < length; i++) {\n      if (focused.group[i].seriesID === item.series.id && focused.group[i].index === item.index) {\n        status.focused = true;\n        break;\n      }\n    }\n\n    status.otherFocused = !status.focused; // For series\n  } else if (focused.series) {\n    status.focused = focused.series.id === item.id;\n    status.otherFocused = !status.focused;\n  }\n\n  return status;\n}\n\nfunction getStatusStyle(item, status, decorator, defaults$$1) {\n  if (item.series) {\n    defaults$$1 = _extends({}, defaults$$1, item.series.style);\n  }\n\n  return materializeStyles(decorator(_extends({}, item, status)), defaults$$1);\n}\n\nfunction buildStyleGetters(series, defaults$$1) {\n  series.getStatusStyle = function (focused, decorator) {\n    var status = getStatus(series, focused);\n    series.style = getStatusStyle(series, status, decorator, defaults$$1);\n    return series.style;\n  }; // We also need to decorate each datum in the same fashion\n\n\n  series.datums.forEach(function (datum) {\n    datum.getStatusStyle = function (focused, decorator) {\n      var status = getStatus(datum, focused);\n      datum.style = getStatusStyle(datum, status, decorator, defaults$$1);\n      return datum.style;\n    };\n  });\n}\n\nfunction getMultiAnchor(_ref) {\n  var anchor = _ref.anchor,\n      points = _ref.points,\n      gridWidth = _ref.gridWidth,\n      gridHeight = _ref.gridHeight;\n\n  var invalid = function invalid() {\n    throw new Error(JSON.stringify(anchor) + ' is not a valid tooltip anchor option. You should use a single anchor option or 2 non-conflicting anchor options.');\n  };\n\n  var x = void 0;\n  var y = void 0;\n  var xMin = points[0].anchor.x;\n  var xMax = points[0].anchor.x;\n  var yMin = points[0].anchor.y;\n  var yMax = points[0].anchor.y;\n  points.forEach(function (point) {\n    xMin = Math.min(point.anchor.x, xMin);\n    xMax = Math.max(point.anchor.x, xMax);\n    yMin = Math.min(point.anchor.y, yMin);\n    yMax = Math.max(point.anchor.y, yMax);\n  });\n\n  if (anchor.length > 2) {\n    return invalid();\n  }\n\n  anchor = anchor.sort(function (a) {\n    return a.includes('center') || a.includes('Center') ? 1 : -1;\n  });\n\n  for (var i = 0; i < anchor.length; i++) {\n    var anchorPart = anchor[i]; // Horizontal Positioning\n\n    if (['left', 'right', 'gridLeft', 'gridRight'].includes(anchorPart)) {\n      if (typeof x !== 'undefined') {\n        invalid();\n      }\n\n      if (anchorPart === 'left') {\n        x = xMin;\n      } else if (anchorPart === 'right') {\n        x = xMax;\n      } else if (anchorPart === 'gridLeft') {\n        x = 0;\n      } else if (anchorPart === 'gridRight') {\n        x = gridWidth;\n      } else {\n        invalid();\n      }\n    } // Vertical Positioning\n\n\n    if (['top', 'bottom', 'gridTop', 'gridBottom'].includes(anchorPart)) {\n      if (typeof y !== 'undefined') {\n        invalid();\n      }\n\n      if (anchorPart === 'top') {\n        y = yMin;\n      } else if (anchorPart === 'bottom') {\n        y = yMax;\n      } else if (anchorPart === 'gridTop') {\n        y = 0;\n      } else if (anchorPart === 'gridBottom') {\n        y = gridHeight;\n      } else {\n        invalid();\n      }\n    } // Center Positioning\n\n\n    if (['center', 'gridCenter'].includes(anchorPart)) {\n      if (anchorPart === 'center') {\n        if (typeof y === 'undefined') {\n          y = (yMin + yMax) / 2;\n        }\n\n        if (typeof x === 'undefined') {\n          x = (xMin + xMax) / 2;\n        }\n      } else if (anchorPart === 'gridCenter') {\n        if (typeof y === 'undefined') {\n          y = gridHeight / 2;\n        }\n\n        if (typeof x === 'undefined') {\n          x = gridWidth / 2;\n        }\n      } else {\n        invalid();\n      }\n    } // Auto center the remainder if there is only one anchorPart listed\n\n\n    if (anchor.length === 1) {\n      if (anchor[0].includes('grid')) {\n        anchor.push('gridCenter');\n      } else {\n        anchor.push('center');\n      }\n    }\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}\n\nfunction getClosestPoint(position, datums) {\n  if (!datums || !position || !datums.length) {\n    return;\n  }\n\n  var closestDistance = Infinity;\n  var closestDatum = datums[0];\n  datums.forEach(function (datum) {\n    datum.boundingPoints.forEach(function (pointerPoint) {\n      var distance = Math.sqrt(Math.pow(pointerPoint.x - position.x, 2) + Math.pow(pointerPoint.y - position.y, 2));\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestDatum = datum;\n      }\n    });\n  });\n  return closestDatum;\n}\n\nfunction normalizeColor(style, defaults$$1) {\n  return _extends({}, style, {\n    stroke: style.stroke || style.color || defaults$$1.stroke || defaults$$1.color,\n    fill: style.fill || style.color || defaults$$1.fill || defaults$$1.color\n  });\n}\n\nvar elementTypes = ['area', 'line', 'rectangle', 'circle'];\n\nfunction materializeStyles() {\n  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  style = normalizeColor(style, defaults$$1);\n\n  for (var i = 0; i < elementTypes.length; i++) {\n    var type = elementTypes[i];\n    style[type] = style[type] ? materializeStyles(style[type], defaults$$1) : {};\n  }\n\n  return style;\n}\n\nfunction normalizeGetter(getter) {\n  if (typeof getter === 'function') {\n    return getter;\n  }\n\n  return function (d) {\n    return get$1(d, getter);\n  };\n}\n\nfunction get$1(obj, path, def) {\n  if (typeof obj === 'function') {\n    try {\n      return obj();\n    } catch (e) {\n      return path;\n    }\n  }\n\n  if (!path) {\n    return obj;\n  }\n\n  var pathObj = makePathArray(path);\n  var val = void 0;\n\n  try {\n    val = pathObj.reduce(function (current, pathPart) {\n      return current[pathPart];\n    }, obj);\n  } catch (e) {// do nothing\n  }\n\n  return typeof val !== 'undefined' ? val : def;\n}\n\nfunction makePathArray(obj) {\n  return flattenDeep(obj).join('.').replace('[', '.').replace(']', '').split('.');\n}\n\nfunction flattenDeep(arr) {\n  var newArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!Array.isArray(arr)) {\n    newArr.push(arr);\n  } else {\n    for (var i = 0; i < arr.length; i++) {\n      flattenDeep(arr[i], newArr);\n    }\n  }\n\n  return newArr;\n}\n\nfunction isValidPoint(d) {\n  if (d === null) {\n    return false;\n  }\n\n  if (typeof d === 'undefined') {\n    return false;\n  }\n\n  if (typeof d === 'string' && d === 'null') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getAxisByAxisID(axes, AxisID) {\n  return axes.find(function (d) {\n    return d.id === AxisID;\n  }) || axes[0];\n}\n\nfunction getAxisIndexByAxisID(axes, AxisID) {\n  var index = axes.findIndex(function (d) {\n    return d.id === AxisID;\n  });\n  return index > -1 ? index : 0;\n}\n\nfunction sumObjBy(obj, str) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  }).reduce(function (prev, curr) {\n    return prev + curr[str] || 0;\n  }, 0);\n}\n\nfunction translateX(x) {\n  return 'translate3d(' + Math.round(x) + 'px, 0, 0)';\n}\n\nfunction translateY(y) {\n  return 'translate3d(0, ' + Math.round(y) + 'px, 0)';\n}\n\nfunction translate(x, y) {\n  return 'translate3d(' + Math.round(x) + 'px, ' + Math.round(y) + 'px, 0)';\n}\n\nfunction identity(d) {\n  return d;\n}\n\nfunction throttle(fn) {\n  var instance = void 0;\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (!instance) {\n      instance = raf_1(function () {\n        fn.apply(undefined, args);\n        instance = null;\n      });\n    }\n  };\n}\n\nfunction shallowDiff(a, b) {\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return true;\n  }\n\n  return Object.keys(a).some(function (key) {\n    if (a[key] !== b[key]) {\n      return true;\n    }\n  });\n}\n\nfunction usePropsMemo(fn) {\n  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var watchRef = useRef({\n    style: {},\n    props: {}\n  });\n  var valueRef = useRef();\n  var _obj$style = obj.style,\n      style = _obj$style === undefined ? {} : _obj$style,\n      props = objectWithoutProperties(obj, ['style']);\n\n  if (Utils$1.shallowDiff(watchRef.current.style, style) || Utils$1.shallowDiff(watchRef.current.props, props)) {\n    watchRef.current = obj;\n    valueRef.current = fn();\n  }\n\n  return valueRef.current;\n}\n\nfunction useWhen(obj, when) {\n  var ref = useRef();\n\n  if (when) {\n    ref.current = obj;\n  }\n\n  return ref.current;\n}\n\nfunction useSeriesStyle(series) {\n  var _useContext = useContext(ChartContext),\n      _useContext2 = slicedToArray(_useContext, 1),\n      _useContext2$ = _useContext2[0],\n      focused = _useContext2$.focused,\n      getSeriesStyle = _useContext2$.getSeriesStyle;\n\n  return series.getStatusStyle(focused, getSeriesStyle);\n}\n\nfunction useDatumStyle(datum) {\n  var _useContext3 = useContext(ChartContext),\n      _useContext4 = slicedToArray(_useContext3, 1),\n      _useContext4$ = _useContext4[0],\n      focused = _useContext4$.focused,\n      getDatumStyle = _useContext4$.getDatumStyle;\n\n  return datum.getStatusStyle(focused, getDatumStyle);\n}\n\nvar running = false;\nvar scheduled = null;\nvar subscribers = [];\n\nvar schedule = function schedule(cb) {\n  var instance = setTimeout(cb, 20);\n  return function () {\n    clearTimeout(instance);\n  };\n};\n\nvar tick = function tick() {\n  subscribers.forEach(function (s) {\n    return s();\n  });\n\n  if (running) {\n    if (scheduled) {\n      return;\n    }\n\n    scheduled = schedule(function () {\n      scheduled = false;\n      tick();\n    });\n  }\n};\n\nvar onTick = function onTick(fn) {\n  subscribers.push(fn);\n\n  if (!running) {\n    running = true;\n    scheduled = schedule(function () {\n      scheduled = false;\n      tick();\n    });\n  }\n\n  return function () {\n    subscribers = subscribers.filter(function (d) {\n      return d !== fn;\n    });\n\n    if (!subscribers.length) {\n      running = false;\n\n      if (scheduled) {\n        scheduled();\n      }\n    }\n  };\n};\n\nfunction onResize(element, fn) {\n  var hash = void 0;\n\n  var getHash = function getHash(element) {\n    var dims = element.getBoundingClientRect();\n    return [dims.width, dims.height].join('');\n  };\n\n  var unsubscribe = onTick(function () {\n    var newHash = getHash(element);\n\n    if (newHash !== hash) {\n      hash = newHash;\n      fn();\n    }\n  });\n  return unsubscribe;\n}\n\nfunction useHyperResponsive() {\n  var _useState = useState({\n    width: 0,\n    height: 0\n  }),\n      _useState2 = slicedToArray(_useState, 2),\n      _useState2$ = _useState2[0],\n      width = _useState2$.width,\n      height = _useState2$.height,\n      setState = _useState2[1];\n\n  var elRef = useRef();\n  var resize = useRef();\n\n  resize.current = function () {\n    if (!elRef.current) {\n      return;\n    }\n\n    var computed = window.getComputedStyle(elRef.current.parentElement);\n    var paddingTop = computed.paddingTop,\n        paddingBottom = computed.paddingBottom,\n        paddingLeft = computed.paddingLeft,\n        paddingRight = computed.paddingRight,\n        boxSizing = computed.boxSizing,\n        borderTopWidth = computed.borderTopWidth,\n        borderLeftWidth = computed.borderLeftWidth,\n        borderRightWidth = computed.borderRightWidth,\n        borderBottomWidth = computed.borderBottomWidth;\n    var newWidth = computed.width,\n        newHeight = computed.height;\n    newWidth = parseInt(newWidth);\n    newHeight = parseInt(newHeight);\n\n    if (boxSizing === 'border-box') {\n      newWidth -= parseInt(paddingLeft);\n      newWidth -= parseInt(paddingRight);\n      newHeight -= parseInt(paddingTop);\n      newHeight -= parseInt(paddingBottom);\n      newWidth -= parseInt(borderLeftWidth);\n      newWidth -= parseInt(borderRightWidth);\n      newHeight -= parseInt(borderTopWidth);\n      newHeight -= parseInt(borderBottomWidth);\n    }\n\n    if (newWidth !== width || newHeight !== height) {\n      setState(function () {\n        return {\n          width: newWidth,\n          height: newHeight\n        };\n      });\n    }\n  };\n\n  useEffect(function () {\n    var stopListening = onResize(elRef.current.parentElement, resize.current);\n    return function () {\n      stopListening();\n    };\n  }, []);\n  return [{\n    width: width,\n    height: height\n  }, function (el) {\n    elRef.current = el;\n  }];\n} //\n\n\nvar defaultStyle = {\n  strokeWidth: 0,\n  fill: '#333',\n  opacity: 1,\n  rx: 0,\n  ry: 0\n};\n\nvar Rectangle = function (_React$Component) {\n  inherits(Rectangle, _React$Component);\n\n  function Rectangle() {\n    classCallCheck(this, Rectangle);\n    return possibleConstructorReturn(this, (Rectangle.__proto__ || Object.getPrototypeOf(Rectangle)).apply(this, arguments));\n  }\n\n  createClass(Rectangle, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          style = _props.style,\n          opacity = _props.opacity,\n          x1 = _props.x1,\n          y1 = _props.y1,\n          x2 = _props.x2,\n          y2 = _props.y2,\n          rest = objectWithoutProperties(_props, ['style', 'opacity', 'x1', 'y1', 'x2', 'y2']);\n\n      var resolvedStyle = _extends({}, defaultStyle, style);\n\n      var xStart = Math.min(x1, x2);\n      var yStart = Math.min(y1, y2);\n      var xEnd = Math.max(x1, x2);\n      var yEnd = Math.max(y1, y2);\n      var height = Math.max(yEnd - yStart, 0);\n      var width = Math.max(xEnd - xStart, 0);\n      return React.createElement('rect', _extends({}, rest, {\n        x: xStart,\n        y: yStart,\n        width: width,\n        height: height,\n        style: resolvedStyle\n      }));\n    }\n  }]);\n  return Rectangle;\n}(React.Component);\n\nRectangle.defaultProps = {\n  opacity: 1\n};\n\nfunction constant(x) {\n  return function () {\n    return x;\n  };\n}\n\nfunction x(d) {\n  return d[0];\n}\n\nfunction y(d) {\n  return d[1];\n}\n\nfunction RedBlackTree() {\n  this._ = null; // root node\n}\n\nfunction RedBlackNode(node) {\n  node.U = // parent node\n  node.C = // color - true for red, false for black\n  node.L = // left node\n  node.R = // right node\n  node.P = // previous node\n  node.N = null; // next node\n}\n\nRedBlackTree.prototype = {\n  constructor: RedBlackTree,\n  insert: function insert(after, node) {\n    var parent, grandpa, uncle;\n\n    if (after) {\n      node.P = after;\n      node.N = after.N;\n      if (after.N) after.N.P = node;\n      after.N = node;\n\n      if (after.R) {\n        after = after.R;\n\n        while (after.L) {\n          after = after.L;\n        }\n\n        after.L = node;\n      } else {\n        after.R = node;\n      }\n\n      parent = after;\n    } else if (this._) {\n      after = RedBlackFirst(this._);\n      node.P = null;\n      node.N = after;\n      after.P = after.L = node;\n      parent = after;\n    } else {\n      node.P = node.N = null;\n      this._ = node;\n      parent = null;\n    }\n\n    node.L = node.R = null;\n    node.U = parent;\n    node.C = true;\n    after = node;\n\n    while (parent && parent.C) {\n      grandpa = parent.U;\n\n      if (parent === grandpa.L) {\n        uncle = grandpa.R;\n\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.R) {\n            RedBlackRotateLeft(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateRight(this, grandpa);\n        }\n      } else {\n        uncle = grandpa.L;\n\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.L) {\n            RedBlackRotateRight(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateLeft(this, grandpa);\n        }\n      }\n\n      parent = after.U;\n    }\n\n    this._.C = false;\n  },\n  remove: function remove(node) {\n    if (node.N) node.N.P = node.P;\n    if (node.P) node.P.N = node.N;\n    node.N = node.P = null;\n    var parent = node.U,\n        sibling,\n        left = node.L,\n        right = node.R,\n        next,\n        red;\n    if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);\n\n    if (parent) {\n      if (parent.L === node) parent.L = next;else parent.R = next;\n    } else {\n      this._ = next;\n    }\n\n    if (left && right) {\n      red = next.C;\n      next.C = node.C;\n      next.L = left;\n      left.U = next;\n\n      if (next !== right) {\n        parent = next.U;\n        next.U = node.U;\n        node = next.R;\n        parent.L = node;\n        next.R = right;\n        right.U = next;\n      } else {\n        next.U = parent;\n        parent = next;\n        node = next.R;\n      }\n    } else {\n      red = node.C;\n      node = next;\n    }\n\n    if (node) node.U = parent;\n    if (red) return;\n\n    if (node && node.C) {\n      node.C = false;\n      return;\n    }\n\n    do {\n      if (node === this._) break;\n\n      if (node === parent.L) {\n        sibling = parent.R;\n\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateLeft(this, parent);\n          sibling = parent.R;\n        }\n\n        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n          if (!sibling.R || !sibling.R.C) {\n            sibling.L.C = false;\n            sibling.C = true;\n            RedBlackRotateRight(this, sibling);\n            sibling = parent.R;\n          }\n\n          sibling.C = parent.C;\n          parent.C = sibling.R.C = false;\n          RedBlackRotateLeft(this, parent);\n          node = this._;\n          break;\n        }\n      } else {\n        sibling = parent.L;\n\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateRight(this, parent);\n          sibling = parent.L;\n        }\n\n        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n          if (!sibling.L || !sibling.L.C) {\n            sibling.R.C = false;\n            sibling.C = true;\n            RedBlackRotateLeft(this, sibling);\n            sibling = parent.L;\n          }\n\n          sibling.C = parent.C;\n          parent.C = sibling.L.C = false;\n          RedBlackRotateRight(this, parent);\n          node = this._;\n          break;\n        }\n      }\n\n      sibling.C = true;\n      node = parent;\n      parent = parent.U;\n    } while (!node.C);\n\n    if (node) node.C = false;\n  }\n};\n\nfunction RedBlackRotateLeft(tree, node) {\n  var p = node,\n      q = node.R,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.R = q.L;\n  if (p.R) p.R.U = p;\n  q.L = p;\n}\n\nfunction RedBlackRotateRight(tree, node) {\n  var p = node,\n      q = node.L,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.L = q.R;\n  if (p.L) p.L.U = p;\n  q.R = p;\n}\n\nfunction RedBlackFirst(node) {\n  while (node.L) {\n    node = node.L;\n  }\n\n  return node;\n}\n\nfunction createEdge(left, right, v0, v1) {\n  var edge = [null, null],\n      index = edges.push(edge) - 1;\n  edge.left = left;\n  edge.right = right;\n  if (v0) setEdgeEnd(edge, left, right, v0);\n  if (v1) setEdgeEnd(edge, right, left, v1);\n  cells[left.index].halfedges.push(index);\n  cells[right.index].halfedges.push(index);\n  return edge;\n}\n\nfunction createBorderEdge(left, v0, v1) {\n  var edge = [v0, v1];\n  edge.left = left;\n  return edge;\n}\n\nfunction setEdgeEnd(edge, left, right, vertex) {\n  if (!edge[0] && !edge[1]) {\n    edge[0] = vertex;\n    edge.left = left;\n    edge.right = right;\n  } else if (edge.left === right) {\n    edge[1] = vertex;\n  } else {\n    edge[0] = vertex;\n  }\n} // Liang–Barsky line clipping.\n\n\nfunction clipEdge(edge, x0, y0, x1, y1) {\n  var a = edge[0],\n      b = edge[1],\n      ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n  return true;\n}\n\nfunction connectEdge(edge, x0, y0, x1, y1) {\n  var v1 = edge[1];\n  if (v1) return true;\n  var v0 = edge[0],\n      left = edge.left,\n      right = edge.right,\n      lx = left[0],\n      ly = left[1],\n      rx = right[0],\n      ry = right[1],\n      fx = (lx + rx) / 2,\n      fy = (ly + ry) / 2,\n      fm,\n      fb;\n\n  if (ry === ly) {\n    if (fx < x0 || fx >= x1) return;\n\n    if (lx > rx) {\n      if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;\n      v1 = [fx, y1];\n    } else {\n      if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;\n      v1 = [fx, y0];\n    }\n  } else {\n    fm = (lx - rx) / (ry - ly);\n    fb = fy - fm * fx;\n\n    if (fm < -1 || fm > 1) {\n      if (lx > rx) {\n        if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;\n        v1 = [(y1 - fb) / fm, y1];\n      } else {\n        if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;\n        v1 = [(y0 - fb) / fm, y0];\n      }\n    } else {\n      if (ly < ry) {\n        if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;\n        v1 = [x1, fm * x1 + fb];\n      } else {\n        if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;\n        v1 = [x0, fm * x0 + fb];\n      }\n    }\n  }\n\n  edge[0] = v0;\n  edge[1] = v1;\n  return true;\n}\n\nfunction clipEdges(x0, y0, x1, y1) {\n  var i = edges.length,\n      edge;\n\n  while (i--) {\n    if (!connectEdge(edge = edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {\n      delete edges[i];\n    }\n  }\n}\n\nfunction createCell(site) {\n  return cells[site.index] = {\n    site: site,\n    halfedges: []\n  };\n}\n\nfunction cellHalfedgeAngle(cell, edge) {\n  var site = cell.site,\n      va = edge.left,\n      vb = edge.right;\n  if (site === vb) vb = va, va = site;\n  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n  if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];\n  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n}\n\nfunction cellHalfedgeStart(cell, edge) {\n  return edge[+(edge.left !== cell.site)];\n}\n\nfunction cellHalfedgeEnd(cell, edge) {\n  return edge[+(edge.left === cell.site)];\n}\n\nfunction sortCellHalfedges() {\n  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n      var index = new Array(m),\n          array = new Array(m);\n\n      for (j = 0; j < m; ++j) {\n        index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n      }\n\n      index.sort(function (i, j) {\n        return array[j] - array[i];\n      });\n\n      for (j = 0; j < m; ++j) {\n        array[j] = halfedges[index[j]];\n      }\n\n      for (j = 0; j < m; ++j) {\n        halfedges[j] = array[j];\n      }\n    }\n  }\n}\n\nfunction clipCells(x0, y0, x1, y1) {\n  var nCells = cells.length,\n      iCell,\n      cell,\n      site,\n      iHalfedge,\n      halfedges,\n      nHalfedges,\n      start,\n      startX,\n      startY,\n      end,\n      endX,\n      endY,\n      cover = true;\n\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      site = cell.site;\n      halfedges = cell.halfedges;\n      iHalfedge = halfedges.length; // Remove any dangling clipped edges.\n\n      while (iHalfedge--) {\n        if (!edges[halfedges[iHalfedge]]) {\n          halfedges.splice(iHalfedge, 1);\n        }\n      } // Insert any border edges as necessary.\n\n\n      iHalfedge = 0, nHalfedges = halfedges.length;\n\n      while (iHalfedge < nHalfedges) {\n        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n\n        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {\n          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end, Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1] : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1] : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0] : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0] : null)) - 1);\n          ++nHalfedges;\n        }\n      }\n\n      if (nHalfedges) cover = false;\n    }\n  } // If there weren’t any edges, have the closest site cover the extent.\n  // It doesn’t matter which corner of the extent we measure!\n\n\n  if (cover) {\n    var dx,\n        dy,\n        d2,\n        dc = Infinity;\n\n    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        dx = site[0] - x0;\n        dy = site[1] - y0;\n        d2 = dx * dx + dy * dy;\n        if (d2 < dc) dc = d2, cover = cell;\n      }\n    }\n\n    if (cover) {\n      var v00 = [x0, y0],\n          v01 = [x0, y1],\n          v11 = [x1, y1],\n          v10 = [x1, y0];\n      cover.halfedges.push(edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1, edges.push(createBorderEdge(site, v01, v11)) - 1, edges.push(createBorderEdge(site, v11, v10)) - 1, edges.push(createBorderEdge(site, v10, v00)) - 1);\n    }\n  } // Lastly delete any cells with no edges; these were entirely clipped.\n\n\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      if (!cell.halfedges.length) {\n        delete cells[iCell];\n      }\n    }\n  }\n}\n\nvar circlePool = [];\nvar firstCircle;\n\nfunction Circle() {\n  RedBlackNode(this);\n  this.x = this.y = this.arc = this.site = this.cy = null;\n}\n\nfunction attachCircle(arc) {\n  var lArc = arc.P,\n      rArc = arc.N;\n  if (!lArc || !rArc) return;\n  var lSite = lArc.site,\n      cSite = arc.site,\n      rSite = rArc.site;\n  if (lSite === rSite) return;\n  var bx = cSite[0],\n      by = cSite[1],\n      ax = lSite[0] - bx,\n      ay = lSite[1] - by,\n      cx = rSite[0] - bx,\n      cy = rSite[1] - by;\n  var d = 2 * (ax * cy - ay * cx);\n  if (d >= -epsilon2) return;\n  var ha = ax * ax + ay * ay,\n      hc = cx * cx + cy * cy,\n      x = (cy * ha - ay * hc) / d,\n      y = (ax * hc - cx * ha) / d;\n  var circle = circlePool.pop() || new Circle();\n  circle.arc = arc;\n  circle.site = cSite;\n  circle.x = x + bx;\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n  arc.circle = circle;\n  var before = null,\n      node = circles._;\n\n  while (node) {\n    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n      if (node.L) node = node.L;else {\n        before = node.P;\n        break;\n      }\n    } else {\n      if (node.R) node = node.R;else {\n        before = node;\n        break;\n      }\n    }\n  }\n\n  circles.insert(before, circle);\n  if (!before) firstCircle = circle;\n}\n\nfunction detachCircle(arc) {\n  var circle = arc.circle;\n\n  if (circle) {\n    if (!circle.P) firstCircle = circle.N;\n    circles.remove(circle);\n    circlePool.push(circle);\n    RedBlackNode(circle);\n    arc.circle = null;\n  }\n}\n\nvar beachPool = [];\n\nfunction Beach() {\n  RedBlackNode(this);\n  this.edge = this.site = this.circle = null;\n}\n\nfunction createBeach(site) {\n  var beach = beachPool.pop() || new Beach();\n  beach.site = site;\n  return beach;\n}\n\nfunction detachBeach(beach) {\n  detachCircle(beach);\n  beaches.remove(beach);\n  beachPool.push(beach);\n  RedBlackNode(beach);\n}\n\nfunction removeBeach(beach) {\n  var circle = beach.circle,\n      x = circle.x,\n      y = circle.cy,\n      vertex = [x, y],\n      previous = beach.P,\n      next = beach.N,\n      disappearing = [beach];\n  detachBeach(beach);\n  var lArc = previous;\n\n  while (lArc.circle && Math.abs(x - lArc.circle.x) < epsilon && Math.abs(y - lArc.circle.cy) < epsilon) {\n    previous = lArc.P;\n    disappearing.unshift(lArc);\n    detachBeach(lArc);\n    lArc = previous;\n  }\n\n  disappearing.unshift(lArc);\n  detachCircle(lArc);\n  var rArc = next;\n\n  while (rArc.circle && Math.abs(x - rArc.circle.x) < epsilon && Math.abs(y - rArc.circle.cy) < epsilon) {\n    next = rArc.N;\n    disappearing.push(rArc);\n    detachBeach(rArc);\n    rArc = next;\n  }\n\n  disappearing.push(rArc);\n  detachCircle(rArc);\n  var nArcs = disappearing.length,\n      iArc;\n\n  for (iArc = 1; iArc < nArcs; ++iArc) {\n    rArc = disappearing[iArc];\n    lArc = disappearing[iArc - 1];\n    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n  }\n\n  lArc = disappearing[0];\n  rArc = disappearing[nArcs - 1];\n  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nfunction addBeach(site) {\n  var x = site[0],\n      directrix = site[1],\n      lArc,\n      rArc,\n      dxl,\n      dxr,\n      node = beaches._;\n\n  while (node) {\n    dxl = leftBreakPoint(node, directrix) - x;\n    if (dxl > epsilon) node = node.L;else {\n      dxr = x - rightBreakPoint(node, directrix);\n\n      if (dxr > epsilon) {\n        if (!node.R) {\n          lArc = node;\n          break;\n        }\n\n        node = node.R;\n      } else {\n        if (dxl > -epsilon) {\n          lArc = node.P;\n          rArc = node;\n        } else if (dxr > -epsilon) {\n          lArc = node;\n          rArc = node.N;\n        } else {\n          lArc = rArc = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  createCell(site);\n  var newArc = createBeach(site);\n  beaches.insert(lArc, newArc);\n  if (!lArc && !rArc) return;\n\n  if (lArc === rArc) {\n    detachCircle(lArc);\n    rArc = createBeach(lArc.site);\n    beaches.insert(newArc, rArc);\n    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n    attachCircle(lArc);\n    attachCircle(rArc);\n    return;\n  }\n\n  if (!rArc) {\n    // && lArc\n    newArc.edge = createEdge(lArc.site, newArc.site);\n    return;\n  } // else lArc !== rArc\n\n\n  detachCircle(lArc);\n  detachCircle(rArc);\n  var lSite = lArc.site,\n      ax = lSite[0],\n      ay = lSite[1],\n      bx = site[0] - ax,\n      by = site[1] - ay,\n      rSite = rArc.site,\n      cx = rSite[0] - ax,\n      cy = rSite[1] - ay,\n      d = 2 * (bx * cy - by * cx),\n      hb = bx * bx + by * by,\n      hc = cx * cx + cy * cy,\n      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n  setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n  newArc.edge = createEdge(lSite, site, null, vertex);\n  rArc.edge = createEdge(site, rSite, null, vertex);\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nfunction leftBreakPoint(arc, directrix) {\n  var site = arc.site,\n      rfocx = site[0],\n      rfocy = site[1],\n      pby2 = rfocy - directrix;\n  if (!pby2) return rfocx;\n  var lArc = arc.P;\n  if (!lArc) return -Infinity;\n  site = lArc.site;\n  var lfocx = site[0],\n      lfocy = site[1],\n      plby2 = lfocy - directrix;\n  if (!plby2) return lfocx;\n  var hl = lfocx - rfocx,\n      aby2 = 1 / pby2 - 1 / plby2,\n      b = hl / plby2;\n  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n  return (rfocx + lfocx) / 2;\n}\n\nfunction rightBreakPoint(arc, directrix) {\n  var rArc = arc.N;\n  if (rArc) return leftBreakPoint(rArc, directrix);\n  var site = arc.site;\n  return site[1] === directrix ? site[0] : Infinity;\n}\n\nvar epsilon = 1e-6;\nvar epsilon2 = 1e-12;\nvar beaches;\nvar cells;\nvar circles;\nvar edges;\n\nfunction triangleArea(a, b, c) {\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n}\n\nfunction lexicographic(a, b) {\n  return b[1] - a[1] || b[0] - a[0];\n}\n\nfunction Diagram(sites, extent) {\n  var site = sites.sort(lexicographic).pop(),\n      x,\n      y,\n      circle;\n  edges = [];\n  cells = new Array(sites.length);\n  beaches = new RedBlackTree();\n  circles = new RedBlackTree();\n\n  while (true) {\n    circle = firstCircle;\n\n    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {\n      if (site[0] !== x || site[1] !== y) {\n        addBeach(site);\n        x = site[0], y = site[1];\n      }\n\n      site = sites.pop();\n    } else if (circle) {\n      removeBeach(circle.arc);\n    } else {\n      break;\n    }\n  }\n\n  sortCellHalfedges();\n\n  if (extent) {\n    var x0 = +extent[0][0],\n        y0 = +extent[0][1],\n        x1 = +extent[1][0],\n        y1 = +extent[1][1];\n    clipEdges(x0, y0, x1, y1);\n    clipCells(x0, y0, x1, y1);\n  }\n\n  this.edges = edges;\n  this.cells = cells;\n  beaches = circles = edges = cells = null;\n}\n\nDiagram.prototype = {\n  constructor: Diagram,\n  polygons: function polygons() {\n    var edges = this.edges;\n    return this.cells.map(function (cell) {\n      var polygon = cell.halfedges.map(function (i) {\n        return cellHalfedgeStart(cell, edges[i]);\n      });\n      polygon.data = cell.site.data;\n      return polygon;\n    });\n  },\n  triangles: function triangles() {\n    var triangles = [],\n        edges = this.edges;\n    this.cells.forEach(function (cell, i) {\n      if (!(m = (halfedges = cell.halfedges).length)) return;\n      var site = cell.site,\n          halfedges,\n          j = -1,\n          m,\n          s0,\n          e1 = edges[halfedges[m - 1]],\n          s1 = e1.left === site ? e1.right : e1.left;\n\n      while (++j < m) {\n        s0 = s1;\n        e1 = edges[halfedges[j]];\n        s1 = e1.left === site ? e1.right : e1.left;\n\n        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n          triangles.push([site.data, s0.data, s1.data]);\n        }\n      }\n    });\n    return triangles;\n  },\n  links: function links() {\n    return this.edges.filter(function (edge) {\n      return edge.right;\n    }).map(function (edge) {\n      return {\n        source: edge.left.data,\n        target: edge.right.data\n      };\n    });\n  },\n  find: function find(x, y, radius) {\n    var that = this,\n        i0,\n        i1 = that._found || 0,\n        n = that.cells.length,\n        cell; // Use the previously-found cell, or start with an arbitrary one.\n\n    while (!(cell = that.cells[i1])) {\n      if (++i1 >= n) return null;\n    }\n\n    var dx = x - cell.site[0],\n        dy = y - cell.site[1],\n        d2 = dx * dx + dy * dy; // Traverse the half-edges to find a closer cell, if any.\n\n    do {\n      cell = that.cells[i0 = i1], i1 = null;\n      cell.halfedges.forEach(function (e) {\n        var edge = that.edges[e],\n            v = edge.left;\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\n        var vx = x - v[0],\n            vy = y - v[1],\n            v2 = vx * vx + vy * vy;\n        if (v2 < d2) d2 = v2, i1 = v.index;\n      });\n    } while (i1 !== null);\n\n    that._found = i0;\n    return radius == null || d2 <= radius * radius ? cell.site : null;\n  }\n};\n\nfunction voronoi() {\n  var x$$1 = x,\n      y$$1 = y,\n      extent = null;\n\n  function voronoi(data) {\n    return new Diagram(data.map(function (d, i) {\n      var s = [Math.round(x$$1(d, i, data) / epsilon) * epsilon, Math.round(y$$1(d, i, data) / epsilon) * epsilon];\n      s.index = i;\n      s.data = d;\n      return s;\n    }), extent);\n  }\n\n  voronoi.polygons = function (data) {\n    return voronoi(data).polygons();\n  };\n\n  voronoi.links = function (data) {\n    return voronoi(data).links();\n  };\n\n  voronoi.triangles = function (data) {\n    return voronoi(data).triangles();\n  };\n\n  voronoi.x = function (_) {\n    return arguments.length ? (x$$1 = typeof _ === \"function\" ? _ : constant(+_), voronoi) : x$$1;\n  };\n\n  voronoi.y = function (_) {\n    return arguments.length ? (y$$1 = typeof _ === \"function\" ? _ : constant(+_), voronoi) : y$$1;\n  };\n\n  voronoi.extent = function (_) {\n    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n  };\n\n  voronoi.size = function (_) {\n    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\n  };\n\n  return voronoi;\n}\n\nvar pi = Math.PI,\n    tau = 2 * pi,\n    epsilon$1 = 1e-6,\n    tauEpsilon = tau - epsilon$1;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path();\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function moveTo(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function lineTo(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {\n    this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x1,y1).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon$1)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n      // Equivalently, is (x1,y1) coincident with (x2,y2)?\n      // Or, is the radius zero? Line to (x1,y1).\n      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {\n          this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n        } // Otherwise, draw an arc!\n        else {\n            var x20 = x2 - x0,\n                y20 = y2 - y0,\n                l21_2 = x21 * x21 + y21 * y21,\n                l20_2 = x20 * x20 + y20 * y20,\n                l21 = Math.sqrt(l21_2),\n                l01 = Math.sqrt(l01_2),\n                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n                t01 = l / l01,\n                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.\n\n            if (Math.abs(t01 - 1) > epsilon$1) {\n              this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n            }\n\n            this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n          }\n  },\n  arc: function arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.\n\n    if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x0,y0).\n\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {\n        this._ += \"L\" + x0 + \",\" + y0;\n      } // Is this arc empty? We’re done.\n\n\n    if (!r) return; // Does the angle go the wrong way? Flip the direction.\n\n    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.\n\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    } // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon$1) {\n        this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n      }\n  },\n  rect: function rect(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n  },\n  toString: function toString() {\n    return this._;\n  }\n};\n\nfunction constant$1(x) {\n  return function constant() {\n    return x;\n  };\n}\n\nvar epsilon$2 = 1e-12;\nvar pi$1 = Math.PI;\n\nfunction Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n\n      case 1:\n        this._point = 2;\n      // proceed\n\n      default:\n        this._context.lineTo(x, y);\n\n        break;\n    }\n  }\n};\n\nfunction curveLinear(context) {\n  return new Linear(context);\n}\n\nfunction x$1(p) {\n  return p[0];\n}\n\nfunction y$1(p) {\n  return p[1];\n}\n\nfunction line() {\n  var x$$1 = x$1,\n      y$$1 = y$1,\n      defined = constant$1(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n      }\n\n      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function (_) {\n    return arguments.length ? (x$$1 = typeof _ === \"function\" ? _ : constant$1(+_), line) : x$$1;\n  };\n\n  line.y = function (_) {\n    return arguments.length ? (y$$1 = typeof _ === \"function\" ? _ : constant$1(+_), line) : y$$1;\n  };\n\n  line.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), line) : defined;\n  };\n\n  line.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n\nfunction area() {\n  var x0 = x$1,\n      x1 = null,\n      y0 = constant$1(0),\n      y1 = y$1,\n      defined = constant$1(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function (_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function (_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : x0;\n  };\n\n  area.x1 = function (_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : x1;\n  };\n\n  area.y = function (_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function (_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : y0;\n  };\n\n  area.y1 = function (_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : y1;\n  };\n\n  area.lineX0 = area.lineY0 = function () {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function () {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function () {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), area) : defined;\n  };\n\n  area.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}\n\nfunction noop() {}\n\nfunction _point(that, x, y) {\n  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);\n}\n\nfunction Basis(context) {\n  this._context = context;\n}\n\nBasis.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 3:\n        _point(this, this._x1, this._y1);\n\n      // proceed\n\n      case 2:\n        this._context.lineTo(this._x1, this._y1);\n\n        break;\n    }\n\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n\n      case 1:\n        this._point = 2;\n        break;\n\n      case 2:\n        this._point = 3;\n\n        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);\n\n      // proceed\n\n      default:\n        _point(this, x, y);\n\n        break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nfunction curveBasis(context) {\n  return new Basis(context);\n}\n\nfunction BasisClosed(context) {\n  this._context = context;\n}\n\nBasisClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 1:\n        {\n          this._context.moveTo(this._x2, this._y2);\n\n          this._context.closePath();\n\n          break;\n        }\n\n      case 2:\n        {\n          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n\n          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n\n          this._context.closePath();\n\n          break;\n        }\n\n      case 3:\n        {\n          this.point(this._x2, this._y2);\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          break;\n        }\n    }\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._x2 = x, this._y2 = y;\n        break;\n\n      case 1:\n        this._point = 2;\n        this._x3 = x, this._y3 = y;\n        break;\n\n      case 2:\n        this._point = 3;\n        this._x4 = x, this._y4 = y;\n\n        this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);\n\n        break;\n\n      default:\n        _point(this, x, y);\n\n        break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nfunction curveBasisClosed(context) {\n  return new BasisClosed(context);\n}\n\nfunction BasisOpen(context) {\n  this._context = context;\n}\n\nBasisOpen.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        break;\n\n      case 1:\n        this._point = 2;\n        break;\n\n      case 2:\n        this._point = 3;\n        var x0 = (this._x0 + 4 * this._x1 + x) / 6,\n            y0 = (this._y0 + 4 * this._y1 + y) / 6;\n        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);\n        break;\n\n      case 3:\n        this._point = 4;\n      // proceed\n\n      default:\n        _point(this, x, y);\n\n        break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nfunction curveBasisOpen(context) {\n  return new BasisOpen(context);\n}\n\nfunction Bundle(context, beta) {\n  this._basis = new Basis(context);\n  this._beta = beta;\n}\n\nBundle.prototype = {\n  lineStart: function lineStart() {\n    this._x = [];\n    this._y = [];\n\n    this._basis.lineStart();\n  },\n  lineEnd: function lineEnd() {\n    var x = this._x,\n        y = this._y,\n        j = x.length - 1;\n\n    if (j > 0) {\n      var x0 = x[0],\n          y0 = y[0],\n          dx = x[j] - x0,\n          dy = y[j] - y0,\n          i = -1,\n          t;\n\n      while (++i <= j) {\n        t = i / j;\n\n        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));\n      }\n    }\n\n    this._x = this._y = null;\n\n    this._basis.lineEnd();\n  },\n  point: function point(x, y) {\n    this._x.push(+x);\n\n    this._y.push(+y);\n  }\n};\n\nvar curveBundle = function custom(beta) {\n  function bundle(context) {\n    return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n  }\n\n  bundle.beta = function (beta) {\n    return custom(+beta);\n  };\n\n  return bundle;\n}(0.85);\n\nfunction point$1(that, x, y) {\n  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);\n}\n\nfunction Cardinal(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinal.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x2, this._y2);\n\n        break;\n\n      case 3:\n        point$1(this, this._x1, this._y1);\n        break;\n    }\n\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n\n      case 1:\n        this._point = 2;\n        this._x1 = x, this._y1 = y;\n        break;\n\n      case 2:\n        this._point = 3;\n      // proceed\n\n      default:\n        point$1(this, x, y);\n        break;\n    }\n\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nvar curveCardinal = function custom(tension) {\n  function cardinal(context) {\n    return new Cardinal(context, tension);\n  }\n\n  cardinal.tension = function (tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n}(0);\n\nfunction CardinalClosed(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 1:\n        {\n          this._context.moveTo(this._x3, this._y3);\n\n          this._context.closePath();\n\n          break;\n        }\n\n      case 2:\n        {\n          this._context.lineTo(this._x3, this._y3);\n\n          this._context.closePath();\n\n          break;\n        }\n\n      case 3:\n        {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n    }\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._x3 = x, this._y3 = y;\n        break;\n\n      case 1:\n        this._point = 2;\n\n        this._context.moveTo(this._x4 = x, this._y4 = y);\n\n        break;\n\n      case 2:\n        this._point = 3;\n        this._x5 = x, this._y5 = y;\n        break;\n\n      default:\n        point$1(this, x, y);\n        break;\n    }\n\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nvar curveCardinalClosed = function custom(tension) {\n  function cardinal(context) {\n    return new CardinalClosed(context, tension);\n  }\n\n  cardinal.tension = function (tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n}(0);\n\nfunction CardinalOpen(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalOpen.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        break;\n\n      case 1:\n        this._point = 2;\n        break;\n\n      case 2:\n        this._point = 3;\n        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n        break;\n\n      case 3:\n        this._point = 4;\n      // proceed\n\n      default:\n        point$1(this, x, y);\n        break;\n    }\n\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nvar curveCardinalOpen = function custom(tension) {\n  function cardinal(context) {\n    return new CardinalOpen(context, tension);\n  }\n\n  cardinal.tension = function (tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n}(0);\n\nfunction point$2(that, x, y) {\n  var x1 = that._x1,\n      y1 = that._y1,\n      x2 = that._x2,\n      y2 = that._y2;\n\n  if (that._l01_a > epsilon$2) {\n    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n        n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n  }\n\n  if (that._l23_a > epsilon$2) {\n    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n        m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n  }\n\n  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n}\n\nfunction CatmullRom(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRom.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x2, this._y2);\n\n        break;\n\n      case 3:\n        this.point(this._x2, this._y2);\n        break;\n    }\n\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n\n      case 1:\n        this._point = 2;\n        break;\n\n      case 2:\n        this._point = 3;\n      // proceed\n\n      default:\n        point$2(this, x, y);\n        break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nvar curveCatmullRom = function custom(alpha) {\n  function catmullRom(context) {\n    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n  }\n\n  catmullRom.alpha = function (alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n}(0.5);\n\nfunction CatmullRomClosed(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 1:\n        {\n          this._context.moveTo(this._x3, this._y3);\n\n          this._context.closePath();\n\n          break;\n        }\n\n      case 2:\n        {\n          this._context.lineTo(this._x3, this._y3);\n\n          this._context.closePath();\n\n          break;\n        }\n\n      case 3:\n        {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n    }\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._x3 = x, this._y3 = y;\n        break;\n\n      case 1:\n        this._point = 2;\n\n        this._context.moveTo(this._x4 = x, this._y4 = y);\n\n        break;\n\n      case 2:\n        this._point = 3;\n        this._x5 = x, this._y5 = y;\n        break;\n\n      default:\n        point$2(this, x, y);\n        break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nvar curveCatmullRomClosed = function custom(alpha) {\n  function catmullRom(context) {\n    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n  }\n\n  catmullRom.alpha = function (alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n}(0.5);\n\nfunction CatmullRomOpen(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomOpen.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        break;\n\n      case 1:\n        this._point = 2;\n        break;\n\n      case 2:\n        this._point = 3;\n        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n        break;\n\n      case 3:\n        this._point = 4;\n      // proceed\n\n      default:\n        point$2(this, x, y);\n        break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nvar curveCatmullRomOpen = function custom(alpha) {\n  function catmullRom(context) {\n    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n  }\n\n  catmullRom.alpha = function (alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n}(0.5);\n\nfunction LinearClosed(context) {\n  this._context = context;\n}\n\nLinearClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function lineStart() {\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._point) this._context.closePath();\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);\n  }\n};\n\nfunction curveLinearClosed(context) {\n  return new LinearClosed(context);\n}\n\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n} // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\n\n\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0,\n      h1 = x2 - that._x1,\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n} // Calculate a one-sided slope.\n\n\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n\n\nfunction point$3(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 3;\n\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n\nfunction MonotoneX(context) {\n  this._context = context;\n}\n\nMonotoneX.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x1, this._y1);\n\n        break;\n\n      case 3:\n        point$3(this, this._t0, slope2(this, this._t0));\n        break;\n    }\n\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    var t1 = NaN;\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n\n      case 1:\n        this._point = 2;\n        break;\n\n      case 2:\n        this._point = 3;\n        point$3(this, slope2(this, t1 = slope3(this, x, y)), t1);\n        break;\n\n      default:\n        point$3(this, this._t0, t1 = slope3(this, x, y));\n        break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n};\n\nfunction MonotoneY(context) {\n  this._context = new ReflectContext(context);\n}\n\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {\n  MonotoneX.prototype.point.call(this, y, x);\n};\n\nfunction ReflectContext(context) {\n  this._context = context;\n}\n\nReflectContext.prototype = {\n  moveTo: function moveTo(x, y) {\n    this._context.moveTo(y, x);\n  },\n  closePath: function closePath() {\n    this._context.closePath();\n  },\n  lineTo: function lineTo(x, y) {\n    this._context.lineTo(y, x);\n  },\n  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);\n  }\n};\n\nfunction monotoneX(context) {\n  return new MonotoneX(context);\n}\n\nfunction monotoneY(context) {\n  return new MonotoneY(context);\n}\n\nfunction Natural(context) {\n  this._context = context;\n}\n\nNatural.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x = [];\n    this._y = [];\n  },\n  lineEnd: function lineEnd() {\n    var x = this._x,\n        y = this._y,\n        n = x.length;\n\n    if (n) {\n      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n\n      if (n === 2) {\n        this._context.lineTo(x[1], y[1]);\n      } else {\n        var px = controlPoints(x),\n            py = controlPoints(y);\n\n        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n        }\n      }\n    }\n\n    if (this._line || this._line !== 0 && n === 1) this._context.closePath();\n    this._line = 1 - this._line;\n    this._x = this._y = null;\n  },\n  point: function point(x, y) {\n    this._x.push(+x);\n\n    this._y.push(+y);\n  }\n}; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\n\nfunction controlPoints(x) {\n  var i,\n      n = x.length - 1,\n      m,\n      a = new Array(n),\n      b = new Array(n),\n      r = new Array(n);\n  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n\n  for (i = 1; i < n - 1; ++i) {\n    a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n  }\n\n  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n\n  for (i = 1; i < n; ++i) {\n    m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n  }\n\n  a[n - 1] = r[n - 1] / b[n - 1];\n\n  for (i = n - 2; i >= 0; --i) {\n    a[i] = (r[i] - a[i + 1]) / b[i];\n  }\n\n  b[n - 1] = (x[n] + a[n - 1]) / 2;\n\n  for (i = 0; i < n - 1; ++i) {\n    b[i] = 2 * x[i + 1] - a[i + 1];\n  }\n\n  return [a, b];\n}\n\nfunction curveNatural(context) {\n  return new Natural(context);\n}\n\nfunction Step(context, t) {\n  this._context = context;\n  this._t = t;\n}\n\nStep.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x = this._y = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n\n      case 1:\n        this._point = 2;\n      // proceed\n\n      default:\n        {\n          if (this._t <= 0) {\n            this._context.lineTo(this._x, y);\n\n            this._context.lineTo(x, y);\n          } else {\n            var x1 = this._x * (1 - this._t) + x * this._t;\n\n            this._context.lineTo(x1, this._y);\n\n            this._context.lineTo(x1, y);\n          }\n\n          break;\n        }\n    }\n\n    this._x = x, this._y = y;\n  }\n};\n\nfunction curveStep(context) {\n  return new Step(context, 0.5);\n}\n\nfunction stepBefore(context) {\n  return new Step(context, 0);\n}\n\nfunction stepAfter(context) {\n  return new Step(context, 1);\n} //\n\n\nvar defaultStyle$1 = {\n  strokeWidth: 2,\n  stroke: '#6b6b6b',\n  fill: 'transparent',\n  opacity: 1\n};\n\nfunction Path$1(_ref) {\n  var style = _ref.style,\n      rest = objectWithoutProperties(_ref, ['style']);\n\n  var resolvedStyle = _extends({}, defaultStyle$1, style);\n\n  return React.createElement('path', _extends({}, rest, {\n    style: resolvedStyle\n  }));\n} // import Utils from '../utils/Utils'\n\n\nvar lineFn = line();\n\nfunction Voronoi() {\n  var _useContext = useContext(ChartContext),\n      _useContext2 = slicedToArray(_useContext, 2),\n      _useContext2$ = _useContext2[0],\n      stackData = _useContext2$.stackData,\n      primaryAxes = _useContext2$.primaryAxes,\n      secondaryAxes = _useContext2$.secondaryAxes,\n      showVoronoi = _useContext2$.showVoronoi,\n      width = _useContext2$.width,\n      height = _useContext2$.height,\n      setChartState = _useContext2[1];\n\n  var onHover = function onHover(datum) {\n    return setChartState(function (state) {\n      return _extends({}, state, {\n        focused: datum\n      });\n    });\n  }; // Don't render until we have all dependencies\n\n\n  if (!stackData || !primaryAxes.length || !secondaryAxes.length || !width || !height) {\n    return null;\n  }\n\n  return useMemo(function () {\n    var primaryVertical = primaryAxes.find(function (d) {\n      return d.vertical;\n    });\n    var xScales = primaryVertical ? secondaryAxes : primaryAxes;\n    var yScales = primaryVertical ? primaryAxes : secondaryAxes;\n    var extent = [[xScales[0].scale.range()[0], yScales[0].scale.range()[1]], [xScales[0].scale.range()[1], yScales[0].scale.range()[0]]];\n\n    var VoronoiElement = function VoronoiElement(_ref) {\n      var children = _ref.children,\n          rest = objectWithoutProperties(_ref, ['children']);\n      return React.createElement('g', _extends({\n        className: 'Voronoi',\n        onMouseLeave: function onMouseLeave() {\n          return onHover(null);\n        }\n      }, rest), children);\n    }; // if (type === 'pie') {\n    //   const primaryAxis = primaryAxes[0]\n    //   return (\n    //     <VoronoiElement\n    //       style={{\n    //         transform: Utils.translate(primaryAxis.width /\n    //           2, primaryAxis.height / 2)\n    //       }}\n    //     >\n    //       {stackData.map(series => (\n    //         <React.Fragment key={series.index}>\n    //           {series.datums.map((datum, i) => {\n    //             const arc = makeArc()\n    //               .startAngle(datum.arcData.startAngle)\n    //               .endAngle(datum.arcData.endAngle)\n    //               .padAngle(0)\n    //               .padRadius(0)\n    //               .innerRadius(\n    //                 !series.index\n    //                   ? 0\n    //                   : datum.arcData.innerRadius -\n    //                       datum.arcData.seriesPaddingRadius / 2\n    //               )\n    //               .outerRadius(\n    //                 series.index === stackData.length - 1\n    //                   ? Math.max(primaryAxis.width, primaryAxis.height)\n    //                   : datum.arcData.outerRadius +\n    //                       datum.arcData.seriesPaddingRadius / 2\n    //               )\n    //               .cornerRadius(0)\n    //             return (\n    //               <Path\n    //                 key={i}\n    //                 d={arc()}\n    //                 className='action-voronoi'\n    //                 onMouseEnter={() => onHover([datum])}\n    //                 style={{\n    //                   fill: 'rgba(0,0,0,.2)',\n    //                   stroke: 'rgba(255,255,255,.5)',\n    //                   opacity: showVoronoi ? 1 : 0\n    //                 }}\n    //               />\n    //             )\n    //           })}\n    //         </React.Fragment>\n    //       ))}\n    //     </VoronoiElement>\n    //   )\n    // }\n\n\n    var vor = void 0;\n    var polygons = null;\n    var voronoiData = [];\n    stackData.forEach(function (series) {\n      series.datums.filter(function (d) {\n        return d.defined;\n      }).forEach(function (datum) {\n        datum.boundingPoints.forEach(function (boundingPoint) {\n          if (typeof datum.x !== 'number' || typeof datum.y !== 'number' || Number.isNaN(datum.y) || Number.isNaN(datum.x)) {\n            return;\n          }\n\n          voronoiData.push({\n            x: boundingPoint.x,\n            y: boundingPoint.y,\n            datum: datum\n          });\n        });\n      });\n    });\n    vor = voronoi().x(function (d) {\n      return d.x;\n    }).y(function (d) {\n      return d.y;\n    }).extent(extent)(voronoiData);\n    polygons = vor.polygons();\n    return React.createElement(VoronoiElement, null, polygons.map(function (points, i) {\n      var path = lineFn(points);\n      return React.createElement(Path$1, {\n        key: i,\n        d: path,\n        className: 'action-voronoi',\n        onMouseEnter: function onMouseEnter() {\n          return onHover(points.data.datum);\n        },\n        style: {\n          fill: 'rgba(0,0,0,.2)',\n          stroke: 'rgba(255,255,255,.5)',\n          opacity: showVoronoi ? 1 : 0\n        }\n      });\n    }));\n  }, [stackData]);\n}\n\nvar Voronoi$1 = useHooks(Voronoi); //\n\nvar defaultStyle$2 = {\n  strokeWidth: 1,\n  fill: 'transparent',\n  opacity: 1\n};\n\nvar Line = function (_React$Component) {\n  inherits(Line, _React$Component);\n\n  function Line() {\n    classCallCheck(this, Line);\n    return possibleConstructorReturn(this, (Line.__proto__ || Object.getPrototypeOf(Line)).apply(this, arguments));\n  }\n\n  createClass(Line, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          style = _props.style,\n          rest = objectWithoutProperties(_props, ['style']);\n\n      var resolvedStyle = _extends({}, defaultStyle$2, style);\n\n      return React.createElement('line', _extends({}, rest, {\n        style: resolvedStyle\n      }));\n    }\n  }]);\n  return Line;\n}(React.Component); //\n\n\nvar defaultStyle$3 = {\n  fontFamily: 'Helvetica',\n  fontSize: 10,\n  opacity: 1\n};\n\nvar Text = function (_React$Component) {\n  inherits(Text, _React$Component);\n\n  function Text() {\n    classCallCheck(this, Text);\n    return possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));\n  }\n\n  createClass(Text, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          style = _props.style,\n          opacity = _props.opacity,\n          rest = objectWithoutProperties(_props, ['style', 'opacity']);\n\n      var resolvedStyle = _extends({}, defaultStyle$3, style);\n\n      return React.createElement('text', _extends({}, rest, {\n        style: resolvedStyle\n      }));\n    }\n  }]);\n  return Text;\n}(React.Component);\n\nText.defaultProps = {\n  opacity: 1\n};\nvar Group = React.forwardRef(function Group(props, ref) {\n  return React.createElement('g', _extends({}, props, {\n    ref: ref\n  }));\n});\nvar positionTop = 'top';\nvar positionRight = 'right';\nvar positionBottom = 'bottom';\nvar positionLeft = 'left';\nvar groupModeSingle = 'single';\nvar groupModeSeries = 'series';\nvar groupModePrimary = 'primary';\nvar groupModeSecondary = 'secondary';\nvar alignAuto = 'auto';\nvar alignRight = 'right';\nvar alignTopRight = 'topRight';\nvar alignBottomRight = 'bottomRight';\nvar alignLeft = 'left';\nvar alignTopLeft = 'topLeft';\nvar alignBottomLeft = 'bottomLeft';\nvar alignTop = 'top';\nvar alignBottom = 'bottom';\nvar axisTypeOrdinal = 'ordinal';\nvar axisTypeTime = 'time';\nvar axisTypeUtc = 'utc';\nvar axisTypeLinear = 'linear';\nvar axisTypeLog = 'log';\nvar anchorPointer = 'pointer';\nvar anchorClosest = 'closest';\nvar anchorCenter = 'center';\nvar anchorTop = 'top';\nvar anchorBottom = 'bottom';\nvar anchorLeft = 'left';\nvar anchorRight = 'right';\nvar anchorGridTop = 'gridTop';\nvar anchorGridBottom = 'gridBottom';\nvar anchorGridLeft = 'gridLeft';\nvar anchorGridRight = 'gridRight';\nvar defaultStyles = {\n  line: {\n    strokeWidth: '1',\n    fill: 'transparent'\n  },\n  tick: {\n    fontSize: 10,\n    fontFamily: 'sans-serif'\n  }\n};\nvar fontSize = 10;\n\nvar identity$2 = function identity(d) {\n  return d;\n};\n\nvar radiansToDegrees = function radiansToDegrees(r) {\n  return r * (180 / Math.PI);\n};\n\nfunction AxisLinear(_ref) {\n  var id = _ref.id,\n      type = _ref.type,\n      position = _ref.position,\n      tickSizeInner = _ref.tickSizeInner,\n      tickSizeOuter = _ref.tickSizeOuter,\n      show = _ref.show,\n      showGrid = _ref.showGrid,\n      showTicks = _ref.showTicks,\n      styles = _ref.styles,\n      maxLabelRotation = _ref.maxLabelRotation,\n      tickPadding = _ref.tickPadding;\n\n  var _useState = useState(0),\n      _useState2 = slicedToArray(_useState, 2),\n      rotation = _useState2[0],\n      setRotation = _useState2[1];\n\n  var _useContext = useContext(ChartContext),\n      _useContext2 = slicedToArray(_useContext, 2),\n      _useContext2$ = _useContext2[0],\n      primaryAxes = _useContext2$.primaryAxes,\n      secondaryAxes = _useContext2$.secondaryAxes,\n      gridWidth = _useContext2$.gridWidth,\n      gridHeight = _useContext2$.gridHeight,\n      dark = _useContext2$.dark,\n      axisDimensions = _useContext2$.axisDimensions,\n      setChartState = _useContext2[1];\n\n  var axis = [].concat(toConsumableArray(primaryAxes), toConsumableArray(secondaryAxes)).find(function (d) {\n    return d.id === id;\n  });\n  var elRef = useRef();\n  var rendersRef = useRef(0);\n  var visibleLabelStepRef = useRef();\n  rendersRef.current++;\n  useEffect(function () {\n    raf_1(function () {\n      rendersRef.current = 0;\n    });\n  }); // Measure after if needed\n\n  useLayoutEffect(function () {\n    if (rendersRef.current > 10) {\n      return;\n    }\n\n    if (!elRef.current) {\n      if (axisDimensions[position] && axisDimensions[position][id]) {\n        // If the entire axis is hidden, then we need to remove the axis dimensions\n        setChartState(function (state) {\n          var newAxes = state.axisDimensions[position] || {};\n          delete newAxes[id];\n          return _extends({}, state, {\n            axisDimensions: _extends({}, state.axisDimensions, defineProperty({}, position, newAxes))\n          });\n        });\n      }\n\n      return;\n    }\n\n    var isHorizontal = position === positionTop || position === positionBottom;\n    var labelDims = Array.apply(undefined, toConsumableArray(elRef.current.querySelectorAll('.tick text'))).map(function (el) {\n      var rect = el.getBoundingClientRect();\n      return {\n        width: rect.width,\n        height: rect.height\n      };\n    });\n    var smallestTickGap = 100000; // This is just a ridiculously large tick spacing that would never happen (hopefully)\n    // If the axis is horizontal, we need to determine any necessary rotation and tick skipping\n\n    if (isHorizontal) {\n      var tickDims = Array.apply(undefined, toConsumableArray(elRef.current.querySelectorAll('.tick'))).map(function (el) {\n        return el.getBoundingClientRect();\n      }); // Determine the smallest gap in ticks on the axis\n\n      tickDims.reduce(function (prev, current) {\n        if (prev) {\n          var gap = current.left - prev.left;\n          smallestTickGap = gap < smallestTickGap ? gap : smallestTickGap;\n        }\n\n        return current;\n      }, false); // Determine the largest label on the axis\n\n      var largestLabel = labelDims.reduce(function (prev, current) {\n        current._overflow = current.width - smallestTickGap;\n\n        if (current._overflow > 0 && current._overflow > prev._overflow) {\n          return current;\n        }\n\n        return prev;\n      }, _extends({}, labelDims[0], {\n        _overflow: 0\n      })); // Determine axis rotation before we measure\n\n      var newRotation = Math.min(Math.max(Math.abs(radiansToDegrees(Math.acos(smallestTickGap / (largestLabel.width + fontSize)))), 0), maxLabelRotation);\n      newRotation = Number.isNaN(newRotation) ? 0 : Math.round(newRotation);\n\n      if (Math.abs(rotation - newRotation) > 15 || rotation !== 0 && newRotation === 0 || rotation !== maxLabelRotation && newRotation === maxLabelRotation) {\n        setRotation(function () {\n          return axis.position === 'top' ? -newRotation : newRotation;\n        });\n      }\n    }\n\n    var newVisibleLabelStep = Math.ceil(fontSize / smallestTickGap);\n\n    if (visibleLabelStepRef.current !== newVisibleLabelStep) {\n      visibleLabelStepRef.current = newVisibleLabelStep;\n    }\n\n    if (!labelDims.length) {\n      return;\n    }\n\n    var width = 0;\n    var height = 0;\n    var top = 0;\n    var bottom = 0;\n    var left = 0;\n    var right = 0;\n\n    if (isHorizontal) {\n      // Add width overflow from the first and last ticks\n      var leftWidth = identity$2(labelDims[0].width);\n      var rightWidth = identity$2(labelDims[labelDims.length - 1].width);\n\n      if (rotation) {\n        right = Math.ceil(fontSize / 2);\n        left = Math.abs(Math.ceil(Math.cos(rotation) * leftWidth)) - axis.barSize / 2;\n      } else {\n        left = Math.ceil(leftWidth / 2);\n        right = Math.ceil(rightWidth / 2);\n      }\n\n      height = Math.max(tickSizeInner, tickSizeOuter) + // Add tick size\n      tickPadding + // Add tick padding\n      // Add the height of the largest label\n      Math.max.apply(Math, toConsumableArray(labelDims.map(function (d) {\n        return Math.ceil(identity$2(d.height));\n      })));\n    } else {\n      // Add height overflow from the first and last ticks\n      top = Math.ceil(identity$2(labelDims[0].height) / 2);\n      bottom = Math.ceil(identity$2(labelDims[labelDims.length - 1].height) / 2);\n      width = Math.max(tickSizeInner, tickSizeOuter) + // Add tick size\n      tickPadding + // Add tick padding\n      // Add the width of the largest label\n      Math.max.apply(Math, toConsumableArray(labelDims.map(function (d) {\n        return Math.ceil(identity$2(d.width));\n      })));\n    }\n\n    var newDimensions = {\n      width: width,\n      height: height,\n      top: top,\n      bottom: bottom,\n      left: left,\n      right: right\n    };\n    setChartState(function (state) {\n      return _extends({}, state, {\n        axisDimensions: _extends({}, state.axisDimensions, defineProperty({}, position, _extends({}, state.axisDimensions[position] || {}, defineProperty({}, id, newDimensions))))\n      });\n    });\n  }, [axis, rotation]); // Not ready? Render null\n\n  if (!axis || !show) {\n    return null;\n  }\n\n  var scale = axis.scale,\n      scaleMax = axis.max,\n      transform = axis.transform,\n      vertical = axis.vertical,\n      format = axis.format,\n      ticks = axis.ticks,\n      _axis$range = slicedToArray(axis.range, 2),\n      range0 = _axis$range[0],\n      range1 = _axis$range[1],\n      directionMultiplier = axis.directionMultiplier,\n      tickOffset = axis.tickOffset,\n      gridOffset = axis.gridOffset,\n      spacing = axis.spacing;\n\n  var axisPath = void 0;\n\n  if (vertical) {\n    if (position === positionLeft) {\n      axisPath = '\\n        M ' + -tickSizeOuter + ', ' + range0 + '\\n        H 0\\n        V ' + range1 + '\\n        H ' + -tickSizeOuter + '\\n      ';\n    } else {\n      axisPath = '\\n        M ' + tickSizeOuter + ', ' + range0 + '\\n        H 0\\n        V ' + range1 + '\\n        H ' + tickSizeOuter + '\\n      ';\n    }\n  } else if (position === positionBottom) {\n    axisPath = '\\n        M 0, ' + tickSizeOuter + '\\n        V 0\\n        H ' + range1 + '\\n        V ' + tickSizeOuter + '\\n      ';\n  } else {\n    axisPath = '\\n        M 0, ' + -tickSizeOuter + '\\n        V 0\\n        H ' + range1 + '\\n        V ' + -tickSizeOuter + '\\n              ';\n  }\n\n  var showGridLine = void 0;\n\n  if (typeof showGrid === 'boolean') {\n    showGridLine = showGrid;\n  } else if (type === axisTypeOrdinal) {\n    showGridLine = false;\n  } else {\n    showGridLine = true;\n  } // Combine default styles with style props\n\n\n  var axisStyles = _extends({}, defaultStyles, styles);\n\n  return React.createElement(Group, {\n    className: 'Axis',\n    style: {\n      pointerEvents: 'none',\n      transform: position === positionRight ? Utils$1.translateX(gridWidth) : position === positionBottom ? Utils$1.translateY(gridHeight) : undefined\n    }\n  }, React.createElement(Path$1, {\n    className: 'domain',\n    d: axisPath,\n    style: _extends({\n      stroke: dark ? 'rgba(255,255,255, .1)' : 'rgba(0,0,0, .1)'\n    }, axisStyles.line)\n  }), React.createElement(Group, {\n    className: 'ticks',\n    ref: elRef,\n    style: {}\n  }, ticks.map(function (tick, i) {\n    return React.createElement(Group, {\n      key: [String(tick), i].join('_'),\n      className: 'tick',\n      style: {\n        transform: transform(scale(tick) || 0)\n      }\n    }, showTicks ? React.createElement(Line, {\n      x1: vertical ? 0 : tickOffset,\n      x2: vertical ? directionMultiplier * tickSizeInner : tickOffset,\n      y1: vertical ? tickOffset : 0,\n      y2: vertical ? tickOffset : directionMultiplier * tickSizeInner,\n      style: _extends({\n        stroke: dark ? 'rgba(255,255,255, .1)' : 'rgba(0,0,0, .1)',\n        strokeWidth: 1\n      }, axisStyles.line)\n    }) : null, showGridLine && React.createElement(Line, {\n      x1: vertical ? 0 : gridOffset,\n      x2: vertical ? scaleMax : gridOffset,\n      y1: vertical ? gridOffset : 0,\n      y2: vertical ? gridOffset : scaleMax,\n      style: _extends({\n        stroke: dark ? 'rgba(255,255,255, .1)' : 'rgba(0,0,0, .1)',\n        strokeWidth: 1\n      }, axisStyles.line)\n    }), showTicks ? React.createElement(Text, {\n      style: _extends({\n        fill: dark ? 'white' : 'black'\n      }, axisStyles.tick, {\n        transform: Utils$1.translate(vertical ? directionMultiplier * spacing : tickOffset, vertical ? tickOffset : directionMultiplier * spacing) + ' rotate(' + -rotation + 'deg)'\n      }),\n      dominantBaseline: rotation ? 'central' : position === positionBottom ? 'hanging' : position === positionTop ? 'alphabetic' : 'central',\n      textAnchor: rotation ? 'end' : position === positionRight ? 'start' : position === positionLeft ? 'end' : 'middle'\n    }, String(format(tick, i))) : null);\n  })));\n}\n\nvar AxisLinear$1 = useHooks(AxisLinear);\n\nvar Axis = function (_React$Component) {\n  inherits(Axis, _React$Component);\n\n  function Axis() {\n    classCallCheck(this, Axis);\n    return possibleConstructorReturn(this, (Axis.__proto__ || Object.getPrototypeOf(Axis)).apply(this, arguments));\n  }\n\n  createClass(Axis, [{\n    key: 'render',\n    value: function render() {\n      var type = this.props.type; // if (type === 'pie') {\n      //   return <AxisPie {...this.props} />\n      // }\n\n      return React.createElement(AxisLinear$1, this.props);\n    }\n  }]);\n  return Axis;\n}(React.Component); //\n\n\nvar triangleSize = 7;\n\nvar getBackgroundColor = function getBackgroundColor(dark) {\n  return dark ? 'rgba(255,255,255,.9)' : 'rgba(0, 26, 39, 0.9)';\n};\n\nfunction Tooltip() {\n  var _useContext = useContext(ChartContext),\n      _useContext2 = slicedToArray(_useContext, 1),\n      chartState = _useContext2[0];\n\n  var primaryAxes = chartState.primaryAxes,\n      secondaryAxes = chartState.secondaryAxes,\n      gridX = chartState.gridX,\n      gridY = chartState.gridY,\n      gridWidth = chartState.gridWidth,\n      gridHeight = chartState.gridHeight,\n      dark = chartState.dark,\n      focused = chartState.focused,\n      lastFocused = chartState.lastFocused,\n      getDatumStyle = chartState.getDatumStyle,\n      tooltip = chartState.tooltip;\n\n  if (!tooltip) {\n    return null;\n  }\n\n  var align = tooltip.align,\n      alignPriority = tooltip.alignPriority,\n      padding = tooltip.padding,\n      tooltipArrowPadding = tooltip.tooltipArrowPadding,\n      arrowPosition = tooltip.arrowPosition,\n      render = tooltip.render,\n      anchor = tooltip.anchor,\n      show = tooltip.show;\n  var elRef = useRef();\n  var tooltipElRef = useRef();\n  var resolvedFocused = focused || lastFocused;\n  var alignX = 0;\n  var alignY = -50;\n  var triangleStyles = {};\n  var resolvedAlign = align || 'auto';\n  var backgroundColor = getBackgroundColor(dark);\n  var resolvedArrowPosition = arrowPosition;\n\n  if (resolvedAlign === 'auto' && elRef.current) {\n    var container = elRef.current;\n    var gridDims = container.getBoundingClientRect();\n    var tooltipDims = tooltipElRef.current.getBoundingClientRect();\n    var space = {\n      left: Infinity,\n      top: Infinity,\n      right: Infinity,\n      bottom: Infinity\n    };\n\n    while (container !== document.body) {\n      container = container.parentElement;\n\n      var _window$getComputedSt = window.getComputedStyle(container),\n          overflowX = _window$getComputedSt.overflowX,\n          overflowY = _window$getComputedSt.overflowY;\n\n      if (container === document.body || [overflowX, overflowY].find(function (d) {\n        return ['auto', 'hidden'].includes(d);\n      })) {\n        var containerDims = container.getBoundingClientRect();\n        var left = gridDims.left - containerDims.left + anchor.x;\n        var top = gridDims.top - containerDims.top + anchor.y;\n        var right = containerDims.width - left;\n        var bottom = containerDims.height - top;\n        space.left = Math.min(space.left, left);\n        space.top = Math.min(space.top, top);\n        space.right = Math.min(space.right, right);\n        space.bottom = Math.min(space.bottom, bottom);\n      }\n    }\n\n    resolvedAlign = null;\n    alignPriority.forEach(function (priority) {\n      if (resolvedAlign) {\n        return;\n      }\n\n      if (priority === 'left') {\n        if (space.left - tooltipArrowPadding - padding - anchor.horizontalPadding > tooltipDims.width && space.top > tooltipDims.height / 2 && space.bottom > tooltipDims.height / 2) {\n          resolvedAlign = priority;\n        }\n      } else if (priority === 'right') {\n        if (space.right - tooltipArrowPadding - padding - anchor.horizontalPadding > tooltipDims.width && space.top > tooltipDims.height / 2 && space.bottom > tooltipDims.height / 2) {\n          resolvedAlign = priority;\n        }\n      } else if (priority === 'top') {\n        if (space.top - tooltipArrowPadding - padding - anchor.verticalPadding > tooltipDims.height && space.left > tooltipDims.width / 2 && space.right > tooltipDims.width / 2) {\n          resolvedAlign = priority;\n        }\n      } else if (priority === 'bottom') {\n        if (space.bottom - tooltipArrowPadding - padding - anchor.verticalPadding > tooltipDims.height && space.left > tooltipDims.width / 2 && space.right > tooltipDims.width / 2) {\n          resolvedAlign = priority;\n        }\n      } else if (priority === 'topLeft') {\n        if (space.top - tooltipArrowPadding > tooltipDims.height && space.left - tooltipArrowPadding > tooltipDims.width) {\n          resolvedAlign = priority;\n        }\n      } else if (priority === 'topRight') {\n        if (space.top - tooltipArrowPadding > tooltipDims.height && space.right - tooltipArrowPadding > tooltipDims.width) {\n          resolvedAlign = priority;\n        }\n      } else if (priority === 'bottomLeft') {\n        if (space.bottom - tooltipArrowPadding > tooltipDims.height && space.left - tooltipArrowPadding > tooltipDims.width) {\n          resolvedAlign = priority;\n        }\n      } else if (priority === 'bottomRight') {\n        if (space.bottom - tooltipArrowPadding > tooltipDims.height && space.right - tooltipArrowPadding > tooltipDims.width) {\n          resolvedAlign = priority;\n        }\n      }\n    });\n  }\n\n  if (resolvedAlign === 'top') {\n    alignX = -50;\n    alignY = -100;\n  } else if (resolvedAlign === 'topRight') {\n    alignX = 0;\n    alignY = -100;\n  } else if (resolvedAlign === 'right') {\n    alignX = 0;\n    alignY = -50;\n  } else if (resolvedAlign === 'bottomRight') {\n    alignX = 0;\n    alignY = 0;\n  } else if (resolvedAlign === 'bottom') {\n    alignX = -50;\n    alignY = 0;\n  } else if (resolvedAlign === 'bottomLeft') {\n    alignX = -100;\n    alignY = 0;\n  } else if (resolvedAlign === 'left') {\n    alignX = -100;\n    alignY = -50;\n  } else if (resolvedAlign === 'topLeft') {\n    alignX = -100;\n    alignY = -100;\n  }\n\n  if (!resolvedArrowPosition) {\n    if (resolvedAlign === 'left') {\n      resolvedArrowPosition = 'right';\n    } else if (resolvedAlign === 'right') {\n      resolvedArrowPosition = 'left';\n    } else if (resolvedAlign === 'top') {\n      resolvedArrowPosition = 'bottom';\n    } else if (resolvedAlign === 'bottom') {\n      resolvedArrowPosition = 'top';\n    } else if (resolvedAlign === 'topRight') {\n      resolvedArrowPosition = 'bottomLeft';\n    } else if (resolvedAlign === 'bottomRight') {\n      resolvedArrowPosition = 'topLeft';\n    } else if (resolvedAlign === 'topLeft') {\n      resolvedArrowPosition = 'bottomRight';\n    } else if (resolvedAlign === 'bottomLeft') {\n      resolvedArrowPosition = 'topRight';\n    }\n  }\n\n  if (resolvedArrowPosition === 'bottom') {\n    triangleStyles = {\n      top: '100%',\n      left: '50%',\n      transform: 'translate3d(-50%, 0%, 0)',\n      borderLeft: triangleSize * 0.8 + 'px solid transparent',\n      borderRight: triangleSize * 0.8 + 'px solid transparent',\n      borderTop: triangleSize + 'px solid ' + backgroundColor\n    };\n  } else if (resolvedArrowPosition === 'top') {\n    triangleStyles = {\n      top: '0%',\n      left: '50%',\n      transform: 'translate3d(-50%, -100%, 0)',\n      borderLeft: triangleSize * 0.8 + 'px solid transparent',\n      borderRight: triangleSize * 0.8 + 'px solid transparent',\n      borderBottom: triangleSize + 'px solid ' + backgroundColor\n    };\n  } else if (resolvedArrowPosition === 'right') {\n    triangleStyles = {\n      top: '50%',\n      left: '100%',\n      transform: 'translate3d(0%, -50%, 0)',\n      borderTop: triangleSize * 0.8 + 'px solid transparent',\n      borderBottom: triangleSize * 0.8 + 'px solid transparent',\n      borderLeft: triangleSize + 'px solid ' + backgroundColor\n    };\n  } else if (resolvedArrowPosition === 'left') {\n    triangleStyles = {\n      top: '50%',\n      left: '0%',\n      transform: 'translate3d(-100%, -50%, 0)',\n      borderTop: triangleSize * 0.8 + 'px solid transparent',\n      borderBottom: triangleSize * 0.8 + 'px solid transparent',\n      borderRight: triangleSize + 'px solid ' + backgroundColor\n    };\n  } else if (resolvedArrowPosition === 'topRight') {\n    triangleStyles = {\n      top: '0%',\n      left: '100%',\n      transform: 'translate3d(-50%, -50%, 0) rotate(-45deg)',\n      borderTop: triangleSize * 0.8 + 'px solid transparent',\n      borderBottom: triangleSize * 0.8 + 'px solid transparent',\n      borderLeft: triangleSize * 2 + 'px solid ' + backgroundColor\n    };\n  } else if (resolvedArrowPosition === 'bottomRight') {\n    triangleStyles = {\n      top: '100%',\n      left: '100%',\n      transform: 'translate3d(-50%, -50%, 0) rotate(45deg)',\n      borderTop: triangleSize * 0.8 + 'px solid transparent',\n      borderBottom: triangleSize * 0.8 + 'px solid transparent',\n      borderLeft: triangleSize * 2 + 'px solid ' + backgroundColor\n    };\n  } else if (resolvedArrowPosition === 'topLeft') {\n    triangleStyles = {\n      top: '0%',\n      left: '0%',\n      transform: 'translate3d(-50%, -50%, 0) rotate(45deg)',\n      borderTop: triangleSize * 0.8 + 'px solid transparent',\n      borderBottom: triangleSize * 0.8 + 'px solid transparent',\n      borderRight: triangleSize * 2 + 'px solid ' + backgroundColor\n    };\n  } else if (resolvedArrowPosition === 'bottomLeft') {\n    triangleStyles = {\n      top: '100%',\n      left: '0%',\n      transform: 'translate3d(-50%, -50%, 0) rotate(-45deg)',\n      borderTop: triangleSize * 0.8 + 'px solid transparent',\n      borderBottom: triangleSize * 0.8 + 'px solid transparent',\n      borderRight: triangleSize * 2 + 'px solid ' + backgroundColor\n    };\n  } else {\n    triangleStyles = {\n      opacity: 0\n    };\n  }\n\n  var primaryAxis = Utils$1.getAxisByAxisID(primaryAxes, resolvedFocused ? resolvedFocused.series.primaryAxisID : null);\n  var secondaryAxis = Utils$1.getAxisByAxisID(secondaryAxes, resolvedFocused ? resolvedFocused.series.secondaryAxisID : null);\n  var resolvedHorizontalPadding = padding + anchor.horizontalPadding;\n  var resolvedVerticalPadding = padding + anchor.verticalPadding;\n\n  var renderProps = _extends({}, chartState, {\n    datum: resolvedFocused,\n    getStyle: function getStyle(datum) {\n      return datum.getStatusStyle(resolvedFocused, getDatumStyle);\n    },\n    primaryAxis: primaryAxis,\n    secondaryAxis: secondaryAxis\n  });\n\n  var renderedChildren = render(renderProps);\n  var previousShowRef = useRef();\n  useEffect(function () {\n    previousShowRef.current = show;\n  });\n  var animateCoords = void 0;\n\n  if (previousShowRef.current === show) {\n    animateCoords = true;\n  }\n\n  return React.createElement('div', {\n    className: 'tooltip-wrap',\n    style: {\n      pointerEvents: 'none',\n      position: 'absolute',\n      left: gridX + 'px',\n      top: gridY + 'px',\n      width: gridWidth + 'px',\n      height: gridHeight + 'px',\n      opacity: show ? 1 : 0,\n      transition: 'all .3s ease'\n    },\n    ref: function ref(el) {\n      elRef.current = el;\n    }\n  }, React.createElement('div', {\n    style: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      transform: Utils$1.translate(anchor.x, anchor.y),\n      transition: animateCoords ? 'all .2s ease' : 'opacity .2s ease'\n    }\n  }, React.createElement('div', {\n    style: {\n      transform: 'translate3d(' + alignX + '%, ' + alignY + '%, 0)',\n      padding: tooltipArrowPadding + resolvedVerticalPadding + 'px ' + (tooltipArrowPadding + resolvedHorizontalPadding) + 'px',\n      width: 'auto',\n      transition: 'all .2s ease'\n    }\n  }, React.createElement('div', {\n    ref: function ref(el) {\n      tooltipElRef.current = el;\n    },\n    style: {\n      fontSize: '12px',\n      padding: '5px',\n      background: getBackgroundColor(dark),\n      color: dark ? 'black' : 'white',\n      borderRadius: '3px',\n      position: 'relative'\n    }\n  }, React.createElement('div', {\n    style: _extends({\n      position: 'absolute',\n      width: 0,\n      height: 0\n    }, triangleStyles, {\n      transition: animateCoords ? 'all .2s ease' : 'none'\n    })\n  }), renderedChildren))));\n}\n\nvar Tooltip$1 = useHooks(Tooltip);\n\nvar getLineBackgroundColor = function getLineBackgroundColor(dark) {\n  return dark ? 'rgba(255,255,255,.3)' : 'rgba(0, 26, 39, 0.3)';\n};\n\nvar getBackgroundColor$1 = function getBackgroundColor(dark) {\n  return dark ? 'rgba(255,255,255,.9)' : 'rgba(0, 26, 39, 0.9)';\n};\n\nfunction Cursor(_ref) {\n  var primary = _ref.primary;\n\n  var _useContext = useContext(ChartContext),\n      _useContext2 = slicedToArray(_useContext, 1),\n      _useContext2$ = _useContext2[0],\n      primaryCursor = _useContext2$.primaryCursor,\n      secondaryCursor = _useContext2$.secondaryCursor,\n      focused = _useContext2$.focused,\n      lastFocused = _useContext2$.lastFocused,\n      gridX = _useContext2$.gridX,\n      gridY = _useContext2$.gridY,\n      dark = _useContext2$.dark;\n\n  var cursor = primary ? primaryCursor : secondaryCursor;\n\n  if (!cursor) {\n    return null;\n  }\n\n  var showLine = cursor.showLine,\n      showLabel = cursor.showLabel,\n      resolvedValue = cursor.resolvedValue,\n      snap = cursor.snap,\n      render = cursor.render,\n      axis = cursor.axis,\n      siblingAxis = cursor.siblingAxis,\n      resolvedShow = cursor.resolvedShow;\n  var resolvedFocused = focused || lastFocused;\n  var lastValue = useWhen(resolvedValue, typeof resolvedValue !== 'undefined'); // Should we animate?\n\n  var animated = snap || axis.type === 'ordinal'; // Get the sibling range\n\n  var siblingRange = siblingAxis.scale.range();\n  var x = void 0;\n  var y = void 0;\n  var x1 = void 0;\n  var x2 = void 0;\n  var y1 = void 0;\n  var y2 = void 0;\n  var alignPctX = void 0;\n  var alignPctY = void 0; // Vertical alignment\n\n  if (axis.vertical) {\n    y = axis.scale(lastValue);\n    x1 = siblingRange[0];\n    x2 = siblingRange[1];\n    y1 = y - 1;\n    y2 = y + axis.cursorSize + 1;\n\n    if (axis.position === 'left') {\n      alignPctX = -100;\n      alignPctY = -50;\n    } else {\n      alignPctX = 0;\n      alignPctY = -50;\n    }\n  } else {\n    x = axis.scale(lastValue);\n    x1 = x - 1;\n    x2 = x + axis.cursorSize + 1;\n    y1 = siblingRange[0];\n    y2 = siblingRange[1];\n\n    if (axis.position === 'top') {\n      alignPctX = -500;\n      alignPctY = -100;\n    } else {\n      alignPctX = -50;\n      alignPctY = 0;\n    }\n  }\n\n  var renderProps = _extends({}, cursor);\n\n  renderProps.formattedValue = String(axis.vertical ? typeof lastValue !== 'undefined' ? axis.format(axis.stacked && !primary && resolvedFocused ? resolvedFocused.totalValue : lastValue) : '' : typeof lastValue !== 'undefined' ? axis.format(axis.stacked && !primary && resolvedFocused ? resolvedFocused.totalValue : lastValue) : '');\n  var lineStartX = Math.min(x1, x2);\n  var lineStartY = Math.min(y1, y2);\n  var lineEndX = Math.max(x1, x2);\n  var lineEndY = Math.max(y1, y2);\n  var bubbleX = axis.vertical && axis.RTL ? lineEndX : x1 + (!axis.vertical ? (x2 - x1) / 2 : 0) + (!axis.vertical ? 1 : 0);\n  var bubbleY = !axis.vertical && axis.RTL ? lineStartY : y1 + (axis.vertical ? (y2 - y1) / 2 : 0) + (axis.vertical ? 1 : 0);\n  var lineHeight = Math.max(lineEndY - lineStartY, 0);\n  var lineWidth = Math.max(lineEndX - lineStartX, 0);\n  var previousShowRef = useRef();\n  useEffect(function () {\n    previousShowRef.current = resolvedShow;\n  });\n  var animateCoords = void 0;\n\n  if (previousShowRef.current === resolvedShow) {\n    animateCoords = true;\n  }\n\n  var renderedChildren = render(renderProps);\n  return React.createElement('div', {\n    style: {\n      pointerEvents: 'none',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      transform: Utils$1.translate(gridX, gridY),\n      opacity: resolvedShow ? 1 : 0,\n      transition: 'all .3s ease'\n    },\n    className: 'Cursor'\n  }, showLine ? React.createElement('div', {\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      transform: Utils$1.translate(lineStartX, lineStartY),\n      width: lineWidth + 'px',\n      height: lineHeight + 'px',\n      background: getLineBackgroundColor(dark),\n      transition: animated && animateCoords ? 'all .2s ease' : 'opacity .2s ease'\n    }\n  }) : null, showLabel ? React.createElement('div', {\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      transform: Utils$1.translate(bubbleX, bubbleY),\n      transition: animated && animateCoords ? 'all .2s ease' : 'opacity .2s ease'\n    }\n  }, React.createElement('div', {\n    style: {\n      padding: '5px',\n      fontSize: '10px',\n      background: getBackgroundColor$1(dark),\n      color: dark ? 'black' : 'white',\n      borderRadius: '3px',\n      position: 'relative',\n      transform: 'translate3d(' + alignPctX + '%, ' + alignPctY + '%, 0)',\n      whiteSpace: 'nowrap'\n    }\n  }, renderedChildren)) : null);\n}\n\nvar Cursor$1 = useHooks(Cursor);\n\nfunction Brush() {\n  var _useContext = useContext(ChartContext),\n      _useContext2 = slicedToArray(_useContext, 1),\n      _useContext2$ = _useContext2[0],\n      pointer = _useContext2$.pointer,\n      brush = _useContext2$.brush,\n      gridX = _useContext2$.gridX,\n      gridY = _useContext2$.gridY,\n      gridHeight = _useContext2$.gridHeight,\n      dark = _useContext2$.dark;\n\n  if (!brush) {\n    return null;\n  }\n\n  return React.createElement('div', {\n    className: 'Brush',\n    style: {\n      pointerEvents: 'none',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      transform: Utils$1.translate(gridX, gridY),\n      opacity: pointer.dragging ? Math.abs(pointer.sourceX - pointer.x) < 20 ? 0.5 : 1 : 0\n    }\n  }, React.createElement('div', {\n    style: _extends({\n      position: 'absolute',\n      transform: Utils$1.translate(Math.min(pointer.x, pointer.sourceX), 0),\n      width: Math.abs(pointer.x - pointer.sourceX) + 'px',\n      height: gridHeight + 'px',\n      background: dark ? 'rgba(255,255,255,.3)' : 'rgba(0, 26, 39, 0.3)'\n    }, brush.style)\n  }));\n}\n\nBrush.defaultProps = {\n  onSelect: function onSelect() {}\n};\nvar Brush$1 = useHooks(Brush);\n\nfunction ChartInner(_ref) {\n  var handleRef = _ref.handleRef,\n      className = _ref.className,\n      _ref$style = _ref.style,\n      style = _ref$style === undefined ? {} : _ref$style,\n      rest = objectWithoutProperties(_ref, ['handleRef', 'className', 'style']);\n\n  var _useContext = useContext(ChartContext),\n      _useContext2 = slicedToArray(_useContext, 1),\n      chartState = _useContext2[0];\n\n  var _useContext3 = useContext(ChartContext),\n      _useContext4 = slicedToArray(_useContext3, 2),\n      _useContext4$ = _useContext4[0],\n      width = _useContext4$.width,\n      height = _useContext4$.height,\n      offset = _useContext4$.offset,\n      gridX = _useContext4$.gridX,\n      gridY = _useContext4$.gridY,\n      stackData = _useContext4$.stackData,\n      primaryAxes = _useContext4$.primaryAxes,\n      secondaryAxes = _useContext4$.secondaryAxes,\n      renderSVG = _useContext4$.renderSVG,\n      onClick = _useContext4$.onClick,\n      seriesOptions = _useContext4$.seriesOptions,\n      getSeriesOrder = _useContext4$.getSeriesOrder,\n      focused = _useContext4$.focused,\n      setChartState = _useContext4[1];\n\n  var elRef = useRef();\n  useEffect(function () {\n    if (!elRef.current) {\n      return;\n    }\n\n    var current = elRef.current.getBoundingClientRect();\n\n    if (current.left !== offset.left || current.top !== offset.top) {\n      setChartState(function (state) {\n        return _extends({}, state, {\n          offset: {\n            left: current.left,\n            top: current.top\n          }\n        });\n      });\n    }\n  });\n\n  var _onMouseMove = useMemo(function () {\n    return Utils$1.throttle(function (e) {\n      var clientX = e.clientX,\n          clientY = e.clientY;\n      setChartState(function (state) {\n        var x = clientX - offset.left - gridX;\n        var y = clientY - offset.top - gridY;\n\n        var pointer = _extends({}, state.pointer, {\n          active: true,\n          x: x,\n          y: y,\n          dragging: state.pointer && state.pointer.down\n        });\n\n        return _extends({}, state, {\n          pointer: pointer\n        });\n      });\n    });\n  }, [offset, gridX, gridY]);\n\n  var onMouseLeave = function onMouseLeave() {\n    setChartState(function (state) {\n      return _extends({}, state, {\n        focused: null\n      });\n    });\n    setChartState(function (state) {\n      return _extends({}, state, {\n        pointer: _extends({}, state.pointer, {\n          active: false\n        })\n      });\n    });\n  };\n\n  var onMouseDown = function onMouseDown() {\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', _onMouseMove);\n    setChartState(function (state) {\n      return _extends({}, state, {\n        pointer: _extends({}, state.pointer, {\n          sourceX: state.pointer.x,\n          sourceY: state.pointer.y,\n          down: true\n        })\n      });\n    });\n  };\n\n  var onMouseUp = function onMouseUp() {\n    document.removeEventListener('mouseup', onMouseUp);\n    document.removeEventListener('mousemove', _onMouseMove);\n    setChartState(function (state) {\n      return _extends({}, state, {\n        pointer: _extends({}, state.pointer, {\n          down: false,\n          dragging: false,\n          released: {\n            x: state.pointer.x,\n            y: state.pointer.y\n          }\n        })\n      });\n    });\n  }; // Reverse the stack order for proper z-indexing\n\n\n  var reversedStackData = [].concat(toConsumableArray(stackData)).reverse();\n  var orderedStackData = getSeriesOrder(reversedStackData);\n  var focusedSeriesIndex = focused ? orderedStackData.findIndex(function (series) {\n    return series.id === focused.series.id;\n  }) : -1; // Bring focused series to the front\n\n  var focusOrderedStackData = focused ? [].concat(toConsumableArray(orderedStackData.slice(0, focusedSeriesIndex)), toConsumableArray(orderedStackData.slice(focusedSeriesIndex + 1)), [orderedStackData[focusedSeriesIndex]]) : orderedStackData;\n  var stacks = focusOrderedStackData.map(function (stack) {\n    return React.createElement(stack.Component, _extends({\n      key: stack.id\n    }, seriesOptions[stack.index], {\n      series: stack,\n      stackData: stackData\n    }));\n  });\n  return React.createElement('div', _extends({\n    ref: handleRef\n  }, rest, {\n    className: 'ReactChart ' + (className || ''),\n    style: _extends({\n      width: width,\n      height: height,\n      position: 'relative'\n    }, style)\n  }), React.createElement('svg', {\n    ref: function ref(el) {\n      elRef.current = el;\n    },\n    style: {\n      width: width,\n      height: height,\n      overflow: 'hidden'\n    }\n  }, React.createElement('g', {\n    onMouseEnter: function onMouseEnter(e) {\n      e.persist();\n\n      _onMouseMove(e);\n    },\n    onMouseMove: function onMouseMove(e) {\n      e.persist();\n\n      _onMouseMove(e);\n    },\n    onMouseLeave: onMouseLeave,\n    onMouseDown: onMouseDown,\n    onClick: onClick,\n    style: {\n      transform: Utils$1.translate(gridX, gridY)\n    }\n  }, React.createElement(Rectangle // To ensure the pointer always has something to hit\n  , {\n    x1: -gridX,\n    x2: width - gridX,\n    y1: -gridY,\n    y2: height - gridY,\n    style: {\n      opacity: 0\n    }\n  }), React.createElement(Voronoi$1, null), React.createElement('g', {\n    className: 'axes'\n  }, [].concat(toConsumableArray(primaryAxes), toConsumableArray(secondaryAxes)).map(function (axis) {\n    return React.createElement(Axis, _extends({\n      key: axis.id\n    }, axis));\n  })), React.createElement('g', {\n    className: 'Series',\n    style: {\n      pointerEvents: 'none'\n    }\n  }, stacks)), renderSVG ? renderSVG({\n    chartState: chartState,\n    setChartState: setChartState\n  }) : null), React.createElement(Cursor$1, {\n    primary: true\n  }), React.createElement(Cursor$1, null), React.createElement(Brush$1, null), React.createElement(Tooltip$1, null));\n}\n\nvar ChartInner$1 = useHooks(ChartInner);\n\nvar calculateMaterializeData = function calculateMaterializeData(_ref) {\n  var getSeries = _ref.getSeries,\n      data = _ref.data,\n      getSeriesID = _ref.getSeriesID,\n      getLabel = _ref.getLabel,\n      getPrimaryAxisID = _ref.getPrimaryAxisID,\n      getSecondaryAxisID = _ref.getSecondaryAxisID,\n      getDatums = _ref.getDatums,\n      getPrimary = _ref.getPrimary,\n      getSecondary = _ref.getSecondary,\n      getR = _ref.getR;\n  return useMemo(function () {\n    getSeries = Utils$1.normalizeGetter(getSeries);\n    getSeriesID = Utils$1.normalizeGetter(getSeriesID);\n    getLabel = Utils$1.normalizeGetter(getLabel);\n    getPrimaryAxisID = Utils$1.normalizeGetter(getPrimaryAxisID);\n    getSecondaryAxisID = Utils$1.normalizeGetter(getSecondaryAxisID);\n    getDatums = Utils$1.normalizeGetter(getDatums);\n    getPrimary = Utils$1.normalizeGetter(getPrimary);\n    getSecondary = Utils$1.normalizeGetter(getSecondary);\n    getR = Utils$1.normalizeGetter(getR); // getSeries\n\n    var originalData = getSeries(data);\n    var materializedData = []; // First access the data, and provide it to the context\n\n    for (var seriesIndex = 0; seriesIndex < originalData.length; seriesIndex++) {\n      var originalSeries = originalData[seriesIndex];\n      var seriesID = getSeriesID(originalSeries, seriesIndex, data);\n      var seriesLabel = getLabel(originalSeries, seriesIndex, data);\n      var primaryAxisID = getPrimaryAxisID(originalSeries, seriesIndex, data);\n      var secondaryAxisID = getSecondaryAxisID(originalSeries, seriesIndex, data);\n      var originalDatums = getDatums(originalSeries, seriesIndex, data);\n      var datums = [];\n\n      for (var datumIndex = 0; datumIndex < originalDatums.length; datumIndex++) {\n        var originalDatum = originalDatums[datumIndex];\n        datums[datumIndex] = {\n          originalSeries: originalSeries,\n          seriesIndex: seriesIndex,\n          seriesID: seriesID,\n          seriesLabel: seriesLabel,\n          index: datumIndex,\n          originalDatum: originalDatum,\n          primary: getPrimary(originalDatum, datumIndex, originalSeries, seriesIndex, data),\n          secondary: getSecondary(originalDatum, datumIndex, originalSeries, seriesIndex, data),\n          r: getR(originalDatum, datumIndex, originalSeries, seriesIndex, data)\n        };\n      }\n\n      materializedData[seriesIndex] = {\n        originalSeries: originalSeries,\n        index: seriesIndex,\n        id: seriesID,\n        label: seriesLabel,\n        primaryAxisID: primaryAxisID,\n        secondaryAxisID: secondaryAxisID,\n        datums: datums\n      };\n    }\n\n    return materializedData;\n  }, [data]);\n};\n\nvar Curves = {\n  basisClosed: curveBasisClosed,\n  basisOpen: curveBasisOpen,\n  basis: curveBasis,\n  bundle: curveBundle,\n  cardinalClosed: curveCardinalClosed,\n  cardinalOpen: curveCardinalOpen,\n  cardinal: curveCardinal,\n  catmullRomClosed: curveCatmullRomClosed,\n  catmullRomOpen: curveCatmullRomOpen,\n  catmullRom: curveCatmullRom,\n  linearClosed: curveLinearClosed,\n  linear: curveLinear,\n  monotoneX: monotoneX,\n  monotoneY: monotoneY,\n  natural: curveNatural,\n  step: curveStep,\n  stepAfter: stepAfter,\n  stepBefore: stepBefore\n}; //\n\nvar defaultStyle$4 = {\n  r: 2,\n  strokeWidth: '1',\n  stroke: '#000000',\n  fill: '#000000',\n  opacity: 1\n};\n\nfunction Circle$1(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      r = _ref.r,\n      style = _ref.style,\n      rest = objectWithoutProperties(_ref, ['x', 'y', 'r', 'style']);\n\n  var resolvedStyle = _extends({}, defaultStyle$4, style);\n\n  return React.createElement('circle', _extends({}, rest, {\n    cx: x || 0,\n    cy: y || 0,\n    r: 1,\n    style: resolvedStyle\n  }));\n}\n\nvar pathDefaultStyle = {\n  strokeWidth: 2\n};\nvar circleDefaultStyle = {\n  r: 2\n};\n\nfunction Line$1(_ref) {\n  var series = _ref.series,\n      showPoints = _ref.showPoints,\n      curve = _ref.curve;\n  var lineFn = useMemo(function () {\n    return line().x(function (d) {\n      return d.x;\n    }).y(function (d) {\n      return d.y;\n    }).defined(function (d) {\n      return d.defined;\n    }).curve(Curves[curve] || curve);\n  }, [curve]);\n  var path = useMemo(function () {\n    return lineFn(series.datums);\n  }, [series]);\n  var style = useSeriesStyle(series);\n  var pathProps = {\n    d: path,\n    style: _extends({}, pathDefaultStyle, style, style.line, {\n      fill: 'none'\n    })\n  };\n  var renderedPath = usePropsMemo(function () {\n    return React.createElement(Path$1, pathProps);\n  }, pathProps);\n  return React.createElement('g', null, renderedPath, showPoints && series.datums.map(function (datum, i) {\n    return React.createElement(Point, {\n      key: i,\n      datum: datum,\n      style: style\n    });\n  }));\n}\n\nLine$1.defaultProps = {\n  curve: 'monotoneX'\n};\n\nLine$1.plotDatum = function (datum, _ref2) {\n  var primaryAxis = _ref2.primaryAxis,\n      secondaryAxis = _ref2.secondaryAxis,\n      xAxis = _ref2.xAxis,\n      yAxis = _ref2.yAxis;\n  datum.primaryCoord = primaryAxis.scale(datum.primary);\n  datum.secondaryCoord = secondaryAxis.scale(datum.secondary);\n  datum.x = xAxis.scale(datum.xValue);\n  datum.y = yAxis.scale(datum.yValue);\n  datum.defined = Utils$1.isValidPoint(datum.xValue) && Utils$1.isValidPoint(datum.yValue);\n  datum.base = primaryAxis.vertical ? xAxis.scale(datum.baseValue) : yAxis.scale(datum.baseValue); // Adjust non-bar elements for ordinal scales\n\n  if (xAxis.type === 'ordinal') {\n    datum.x += xAxis.tickOffset;\n  }\n\n  if (yAxis.type === 'ordinal') {\n    datum.y += yAxis.tickOffset;\n  } // Set the default anchor point\n\n\n  datum.anchor = {\n    x: datum.x,\n    y: datum.y // Set the pointer points (used in voronoi)\n\n  };\n  datum.boundingPoints = [datum.anchor];\n};\n\nLine$1.buildStyles = function (series, _ref3) {\n  var defaultColors = _ref3.defaultColors;\n  var defaults$$1 = {\n    // Pass some sane defaults\n    color: defaultColors[series.index % (defaultColors.length - 1)]\n  };\n  Utils$1.buildStyleGetters(series, defaults$$1);\n};\n\nvar Point = useHooks(function Point(_ref4) {\n  var datum = _ref4.datum,\n      style = _ref4.style;\n\n  if (!datum.defined) {\n    return null;\n  }\n\n  var dataStyle = useDatumStyle(datum);\n  var circleProps = {\n    x: datum ? datum.x : undefined,\n    y: datum ? datum.y : undefined,\n    style: _extends({}, circleDefaultStyle, style, style.circle, dataStyle, dataStyle.circle)\n  };\n  return usePropsMemo(function () {\n    return React.createElement(Circle$1, circleProps);\n  }, circleProps);\n});\nvar Line$2 = useHooks(Line$1);\nvar circleDefaultStyle$1 = {\n  r: 2\n};\n\nfunction Bubble(_ref) {\n  var series = _ref.series;\n  var style = useSeriesStyle(series);\n  return React.createElement('g', null, series.datums.map(function (datum, i) {\n    return React.createElement(Point$1, {\n      key: i,\n      datum: datum,\n      style: style\n    });\n  }));\n}\n\nBubble.plotDatum = function (datum, _ref2) {\n  var primaryAxis = _ref2.primaryAxis,\n      secondaryAxis = _ref2.secondaryAxis,\n      xAxis = _ref2.xAxis,\n      yAxis = _ref2.yAxis;\n  datum.primaryCoord = primaryAxis.scale(datum.primary);\n  datum.secondaryCoord = secondaryAxis.scale(datum.secondary);\n  datum.x = xAxis.scale(datum.xValue);\n  datum.y = yAxis.scale(datum.yValue);\n  datum.defined = Utils$1.isValidPoint(datum.xValue) && Utils$1.isValidPoint(datum.yValue);\n  datum.base = primaryAxis.vertical ? xAxis.scale(datum.baseValue) : yAxis.scale(datum.baseValue); // Adjust non-bar elements for ordinal scales\n\n  if (xAxis.type === 'ordinal') {\n    datum.x += xAxis.tickOffset;\n  }\n\n  if (yAxis.type === 'ordinal') {\n    datum.y += yAxis.tickOffset;\n  } // Set the default anchor point\n\n\n  datum.anchor = {\n    x: datum.x,\n    y: datum.y,\n    verticalPadding: datum.r,\n    horizontalPadding: datum.r // Set the pointer points (used in voronoi)\n\n  };\n  datum.boundingPoints = [datum.anchor];\n};\n\nBubble.buildStyles = function (series, _ref3) {\n  var defaultColors = _ref3.defaultColors;\n  var defaults$$1 = {\n    // Pass some sane defaults\n    color: defaultColors[series.index % (defaultColors.length - 1)]\n  };\n  Utils$1.buildStyleGetters(series, defaults$$1);\n};\n\nvar Point$1 = useHooks(function Point(_ref4) {\n  var datum = _ref4.datum,\n      style = _ref4.style;\n\n  if (!datum.defined) {\n    return null;\n  }\n\n  var dataStyle = useDatumStyle(datum);\n  var circleProps = {\n    x: datum ? datum.x : undefined,\n    y: datum ? datum.y : undefined,\n    style: _extends({}, circleDefaultStyle$1, style, style.circle, dataStyle, dataStyle.circle, typeof datum.r !== 'undefined' ? {\n      r: datum.r\n    } : {})\n  };\n  return usePropsMemo(function () {\n    return React.createElement(Circle$1, circleProps);\n  }, circleProps);\n});\nvar Bubble$1 = useHooks(Bubble);\nvar defaultAreaStyle = {\n  strokeWidth: 0\n};\nvar lineDefaultStyle = {\n  strokeWidth: 3\n};\n\nfunction Area(_ref) {\n  var series = _ref.series,\n      showOrphans = _ref.showOrphans,\n      curve = _ref.curve;\n  var areaFn = area().x(function (d) {\n    return d.x;\n  }).y0(function (d) {\n    return d.base;\n  }).y1(function (d) {\n    return d.y;\n  }).defined(function (d) {\n    return d.defined;\n  }).curve(Curves[curve] || curve);\n  var lineFn = useMemo(function () {\n    return line().x(function (d) {\n      return d.x;\n    }).y(function (d) {\n      return d.y;\n    }).defined(function (d) {\n      return d.defined;\n    }).curve(Curves[curve] || curve);\n  }, [curve]);\n  var areaPath = useMemo(function () {\n    return areaFn(series.datums);\n  }, [series]);\n  var linePath = useMemo(function () {\n    return lineFn(series.datums);\n  }, [series]);\n  var style = useSeriesStyle(series);\n  var areaPathProps = {\n    d: areaPath,\n    style: _extends({}, defaultAreaStyle, style, style.line)\n  };\n  var renderedAreaPath = usePropsMemo(function () {\n    return React.createElement(Path$1, areaPathProps);\n  }, areaPathProps);\n  var linePathProps = {\n    d: linePath,\n    style: _extends({}, defaultAreaStyle, style, style.line, {\n      fill: 'none'\n    })\n  };\n  var renderedLinePath = usePropsMemo(function () {\n    return React.createElement(Path$1, linePathProps);\n  }, linePathProps);\n  return React.createElement('g', null, renderedAreaPath, renderedLinePath, showOrphans && series.datums.map(function (datum, index, all) {\n    return React.createElement(OrphanLine, {\n      key: index,\n      datum: datum,\n      style: style,\n      all: all,\n      index: index\n    });\n  }));\n}\n\nArea.defaultProps = {\n  showOrphans: true,\n  curve: 'linear'\n};\n\nArea.plotDatum = function (datum, _ref2) {\n  var primaryAxis = _ref2.primaryAxis,\n      secondaryAxis = _ref2.secondaryAxis,\n      xAxis = _ref2.xAxis,\n      yAxis = _ref2.yAxis; // Turn clamping on for secondaryAxis\n\n  secondaryAxis.scale.clamp(true);\n  datum.primaryCoord = primaryAxis.scale(datum.primary);\n  datum.secondaryCoord = secondaryAxis.scale(datum.secondary);\n  datum.x = xAxis.scale(datum.xValue);\n  datum.y = yAxis.scale(datum.yValue);\n  datum.defined = Utils$1.isValidPoint(datum.xValue) && Utils$1.isValidPoint(datum.yValue);\n  datum.base = primaryAxis.vertical ? xAxis.scale(datum.baseValue) : yAxis.scale(datum.baseValue); // Turn clamping back off for secondaryAxis\n\n  secondaryAxis.scale.clamp(false); // Adjust non-bar elements for ordinal scales\n\n  if (xAxis.type === 'ordinal') {\n    datum.x += xAxis.tickOffset;\n  }\n\n  if (yAxis.type === 'ordinal') {\n    datum.y += yAxis.tickOffset;\n  } // Set the default anchor point\n\n\n  datum.anchor = {\n    x: datum.x,\n    y: datum.y // Set the pointer points (used in voronoi)\n\n  };\n  datum.boundingPoints = [datum.anchor, {\n    x: primaryAxis.vertical ? primaryAxis.position === 'left' ? datum.base - 1 : datum.base : datum.anchor.x,\n    y: !primaryAxis.vertical ? primaryAxis.position === 'bottom' ? datum.base - 1 : datum.base : datum.anchor.y\n  }];\n};\n\nArea.buildStyles = function (series, _ref3) {\n  var defaultColors = _ref3.defaultColors;\n  var defaults$$1 = {\n    // Pass some sane defaults\n    color: defaultColors[series.index % (defaultColors.length - 1)]\n  };\n  Utils$1.buildStyleGetters(series, defaults$$1);\n};\n\nvar OrphanLine = useHooks(function OrphanLine(_ref4) {\n  var datum = _ref4.datum,\n      style = _ref4.style,\n      all = _ref4.all,\n      index = _ref4.index;\n  var prev = all[index - 1] || {\n    defined: false\n  };\n  var next = all[index + 1] || {\n    defined: false\n  };\n\n  if (!datum.defined || prev.defined || next.defined) {\n    return null;\n  }\n\n  var dataStyle = useDatumStyle(datum);\n  var lineProps = {\n    x1: !datum || Number.isNaN(datum.x) ? null : datum.x,\n    y1: !datum || Number.isNaN(datum.base) ? null : datum.base,\n    x2: !datum || Number.isNaN(datum.x) ? null : datum.x,\n    y2: !datum || Number.isNaN(datum.y) ? null : datum.y,\n    style: _extends({}, lineDefaultStyle, style, style.line, dataStyle, dataStyle.line)\n  };\n  return usePropsMemo(function () {\n    return React.createElement(Line, lineProps);\n  }, lineProps);\n});\nvar Area$1 = useHooks(Area);\n\nfunction Bar(_ref) {\n  var series = _ref.series;\n\n  var _useContext = useContext(ChartContext),\n      _useContext2 = slicedToArray(_useContext, 1),\n      primaryAxes = _useContext2[0].primaryAxes;\n\n  var style = useSeriesStyle(series);\n\n  var _ref2 = series.primaryAxisID ? primaryAxes.find(function (d) {\n    return d.id === series.primaryAxisID;\n  }) : primaryAxes[0],\n      barOffset = _ref2.barOffset;\n\n  return React.createElement('g', {\n    className: 'series bar'\n  }, series.datums.map(function (datum, i) {\n    return React.createElement(BarPiece, _extends({\n      key: i\n    }, {\n      datum: datum,\n      barOffset: barOffset,\n      style: style\n    }));\n  }));\n}\n\nBar.plotDatum = function (datum, _ref3) {\n  var xAxis = _ref3.xAxis,\n      yAxis = _ref3.yAxis,\n      primaryAxis = _ref3.primaryAxis,\n      secondaryAxis = _ref3.secondaryAxis; // Turn clamping on for secondaryAxis\n\n  secondaryAxis.scale.clamp(true);\n  datum.primaryCoord = primaryAxis.scale(datum.primary);\n  datum.secondaryCoord = secondaryAxis.scale(datum.secondary);\n  datum.x = xAxis.scale(datum.xValue);\n  datum.y = yAxis.scale(datum.yValue);\n  datum.defined = Utils$1.isValidPoint(datum.xValue) && Utils$1.isValidPoint(datum.yValue);\n  datum.base = secondaryAxis.scale(datum.baseValue);\n  datum.size = primaryAxis.barSize; // Turn clamping back off for secondaryAxis\n\n  secondaryAxis.scale.clamp(false);\n\n  if (!secondaryAxis.stacked) {\n    datum.size = primaryAxis.seriesBarSize; // Use the seriesTypeIndex here in case we have mixed types.\n\n    var seriesBandScaleOffset = primaryAxis.seriesBandScale(datum.seriesTypeIndex);\n\n    if (secondaryAxis.vertical) {\n      datum.x += seriesBandScaleOffset;\n    } else {\n      datum.y += seriesBandScaleOffset;\n    }\n  } // Set the default anchor point\n\n\n  datum.anchor = {\n    x: datum.x,\n    y: datum.y,\n    horizontalPadding: secondaryAxis.vertical ? datum.size / 2 : 0,\n    verticalPadding: secondaryAxis.vertical ? 0 : datum.size / 2 // Adjust the anchor point for bars\n\n  };\n\n  if (!primaryAxis.vertical) {\n    datum.anchor.x += primaryAxis.type !== 'ordinal' ? 0 : datum.size / 2;\n  } else {\n    datum.anchor.y += primaryAxis.type !== 'ordinal' ? 0 : datum.size / 2;\n  } // Set the pointer points (used in voronoi)\n\n\n  datum.boundingPoints = [// End of bar\n  datum.anchor, // Start of bar\n  {\n    x: primaryAxis.vertical ? primaryAxis.position === 'left' ? datum.base + 1 : datum.base : datum.anchor.x,\n    y: !primaryAxis.vertical ? primaryAxis.position === 'bottom' ? datum.base - 1 : datum.base : datum.anchor.y\n  }];\n};\n\nBar.buildStyles = function (series, _ref4) {\n  var defaultColors = _ref4.defaultColors;\n  var defaults$$1 = {\n    // Pass some sane defaults\n    color: defaultColors[series.index % (defaultColors.length - 1)]\n  };\n  Utils$1.buildStyleGetters(series, defaults$$1);\n};\n\nvar BarPiece = useHooks(function BarPiece(_ref5) {\n  var datum = _ref5.datum,\n      barOffset = _ref5.barOffset,\n      style = _ref5.style;\n\n  var _useContext3 = useContext(ChartContext),\n      _useContext4 = slicedToArray(_useContext3, 1),\n      primaryAxes = _useContext4[0].primaryAxes;\n\n  var x = datum ? datum.x : 0;\n  var y = datum ? datum.y : 0;\n  var base = datum ? datum.base : 0;\n  var size = datum ? datum.size : 0;\n  var x1 = void 0;\n  var y1 = void 0;\n  var x2 = void 0;\n  var y2 = void 0;\n\n  if (primaryAxes.find(function (d) {\n    return d.vertical;\n  })) {\n    x1 = base;\n    x2 = x;\n    y1 = y + barOffset;\n    y2 = y1 + size;\n  } else {\n    x1 = x + barOffset;\n    x2 = x1 + size;\n    y1 = y;\n    y2 = base;\n  }\n\n  var dataStyle = useDatumStyle(datum);\n  var rectangleProps = {\n    style: _extends({}, style, style.rectangle, dataStyle, dataStyle.rectangle),\n    x1: Number.isNaN(x1) ? null : x1,\n    y1: Number.isNaN(y1) ? null : y1,\n    x2: Number.isNaN(x2) ? null : x2,\n    y2: Number.isNaN(y2) ? null : y2\n  };\n  return usePropsMemo(function () {\n    return React.createElement(Rectangle, rectangleProps);\n  }, rectangleProps);\n});\nvar Bar$1 = useHooks(Bar);\nvar seriesTypes = {\n  line: Line$2,\n  bubble: Bubble$1,\n  area: Area$1,\n  bar: Bar$1 // pie: Pie\n\n};\nvar defaultSeries = {\n  type: 'line',\n  showPoints: true,\n  showOrphans: true,\n  curve: 'monotoneX'\n};\nvar seriesPropType = PropTypes.oneOfType([PropTypes.shape({\n  type: PropTypes.string,\n  showPoints: PropTypes.bool,\n  showOrphans: PropTypes.bool,\n  curve: PropTypes.oneOf(Object.keys(Curves))\n}), PropTypes.func]);\n\nvar calculateSeriesOptions = function calculateSeriesOptions(_ref) {\n  var materializedData = _ref.materializedData,\n      series = _ref.series;\n  return materializedData.map(function (s, seriesIndex) {\n    var _defaultSeries = _extends({}, defaultSeries, typeof series === 'function' ? series(s, seriesIndex) : series),\n        type = _defaultSeries.type,\n        rest = objectWithoutProperties(_defaultSeries, ['type']);\n\n    var renderer = seriesTypes[type];\n\n    if (!renderer) {\n      throw new Error('Could not find a registered series type for ' + type);\n    }\n\n    return _extends({}, rest, {\n      type: type,\n      renderer: renderer\n    });\n  });\n};\n\nvar calculateSeriesTypes = function calculateSeriesTypes(_ref) {\n  var materializedData = _ref.materializedData,\n      seriesOptions = _ref.seriesOptions;\n  return useMemo(function () {\n    return materializedData.map(function (series, i) {\n      series.Component = seriesOptions[i].renderer;\n      return series;\n    }).map(function (series, i, all) {\n      var seriesTypeIndex = all.filter(function (d, j) {\n        return j < i && d.Component === series.Component;\n      }).length;\n      return _extends({}, series, {\n        seriesTypeIndex: seriesTypeIndex,\n        datums: series.datums.map(function (datum) {\n          return _extends({}, datum, {\n            seriesTypeIndex: seriesTypeIndex\n          });\n        })\n      });\n    });\n  }, [materializedData].concat(toConsumableArray(seriesOptions.map(function (d) {\n    return d.renderer;\n  }))));\n};\n\nvar calculateDimensions = function calculateDimensions(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      axisDimensions = _ref.axisDimensions,\n      padding = _ref.padding,\n      offset = _ref.offset;\n  offset = useMemo(function () {\n    return {\n      left: offset.left || 0,\n      top: offset.top || 0\n    };\n  }, [offset]);\n\n  var _useMemo = useMemo(function () {\n    // Left\n    var axesLeftWidth = axisDimensions.left && Utils$1.sumObjBy(axisDimensions.left, 'width') || 0;\n    var axesLeftTop = axisDimensions.left && Utils$1.sumObjBy(axisDimensions.left, 'top') || 0;\n    var axesLeftBottom = axisDimensions.left && Utils$1.sumObjBy(axisDimensions.left, 'bottom') || 0; // Right\n\n    var axesRightWidth = axisDimensions.right && Utils$1.sumObjBy(axisDimensions.right, 'width') || 0;\n    var axesRightTop = axisDimensions.right && Utils$1.sumObjBy(axisDimensions.right, 'top') || 0;\n    var axesRightBottom = axisDimensions.right && Utils$1.sumObjBy(axisDimensions.right, 'bottom') || 0; // Top\n\n    var axesTopHeight = axisDimensions.top && Utils$1.sumObjBy(axisDimensions.top, 'height') || 0;\n    var axesTopLeft = axisDimensions.top && Utils$1.sumObjBy(axisDimensions.top, 'left') || 0;\n    var axesTopRight = axisDimensions.top && Utils$1.sumObjBy(axisDimensions.top, 'right') || 0; // Bottom\n\n    var axesBottomHeight = axisDimensions.bottom && Utils$1.sumObjBy(axisDimensions.bottom, 'height') || 0;\n    var axesBottomLeft = axisDimensions.bottom && Utils$1.sumObjBy(axisDimensions.bottom, 'left') || 0;\n    var axesBottomRight = axisDimensions.bottom && Utils$1.sumObjBy(axisDimensions.bottom, 'right') || 0;\n    var paddingLeft = padding.left || 0;\n    var paddingRight = padding.right || 0;\n    var paddingTop = padding.top || 0;\n    var paddingBottom = padding.bottom || 0;\n    var gridX = paddingLeft + Math.max(axesLeftWidth, axesTopLeft, axesBottomLeft);\n    var gridY = paddingTop + Math.max(axesTopHeight, axesLeftTop, axesRightTop);\n    var gridWidth = width - paddingLeft - paddingRight - Math.max(axesLeftWidth, axesTopLeft, axesBottomLeft) - Math.max(axesRightWidth, axesTopRight, axesBottomRight);\n    var gridHeight = height - paddingTop - paddingBottom - Math.max(axesTopHeight, axesLeftTop, axesRightTop) - Math.max(axesBottomHeight, axesLeftBottom, axesRightBottom);\n    return {\n      gridX: gridX,\n      gridY: gridY,\n      gridWidth: gridWidth,\n      gridHeight: gridHeight\n    };\n  }, [width, height, axisDimensions, padding]),\n      gridX = _useMemo.gridX,\n      gridY = _useMemo.gridY,\n      gridWidth = _useMemo.gridWidth,\n      gridHeight = _useMemo.gridHeight;\n\n  return {\n    offset: offset,\n    gridX: gridX,\n    gridY: gridY,\n    gridWidth: gridWidth,\n    gridHeight: gridHeight\n  };\n};\n\nfunction ascending$1(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\nfunction bisector(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    },\n    right: function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending$1(f(d), x);\n  };\n}\n\nvar ascendingBisect = bisector(ascending$1);\nvar bisectRight = ascendingBisect.right;\n\nfunction range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n\nvar e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction ticks(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\n\nfunction tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nfunction tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n\nvar prefix = \"$\";\n\nfunction Map() {}\n\nMap.prototype = map$1.prototype = {\n  constructor: Map,\n  has: function has(key) {\n    return prefix + key in this;\n  },\n  get: function get(key) {\n    return this[prefix + key];\n  },\n  set: function set(key, value) {\n    this[prefix + key] = value;\n    return this;\n  },\n  remove: function remove(key) {\n    var property = prefix + key;\n    return property in this && delete this[property];\n  },\n  clear: function clear() {\n    for (var property in this) {\n      if (property[0] === prefix) delete this[property];\n    }\n  },\n  keys: function keys() {\n    var keys = [];\n\n    for (var property in this) {\n      if (property[0] === prefix) keys.push(property.slice(1));\n    }\n\n    return keys;\n  },\n  values: function values() {\n    var values = [];\n\n    for (var property in this) {\n      if (property[0] === prefix) values.push(this[property]);\n    }\n\n    return values;\n  },\n  entries: function entries() {\n    var entries = [];\n\n    for (var property in this) {\n      if (property[0] === prefix) entries.push({\n        key: property.slice(1),\n        value: this[property]\n      });\n    }\n\n    return entries;\n  },\n  size: function size() {\n    var size = 0;\n\n    for (var property in this) {\n      if (property[0] === prefix) ++size;\n    }\n\n    return size;\n  },\n  empty: function empty() {\n    for (var property in this) {\n      if (property[0] === prefix) return false;\n    }\n\n    return true;\n  },\n  each: function each(f) {\n    for (var property in this) {\n      if (property[0] === prefix) f(this[property], property.slice(1), this);\n    }\n  }\n};\n\nfunction map$1(object, f) {\n  var map = new Map(); // Copy constructor.\n\n  if (object instanceof Map) object.each(function (value, key) {\n    map.set(key, value);\n  }); // Index array by numeric index or specified key function.\n  else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n      if (f == null) while (++i < n) {\n        map.set(i, object[i]);\n      } else while (++i < n) {\n        map.set(f(o = object[i], i, object), o);\n      }\n    } // Convert object to map.\n    else if (object) for (var key in object) {\n        map.set(key, object[key]);\n      }\n  return map;\n}\n\nfunction Set() {}\n\nvar proto = map$1.prototype;\nSet.prototype = set$1.prototype = {\n  constructor: Set,\n  has: proto.has,\n  add: function add(value) {\n    value += \"\";\n    this[prefix + value] = value;\n    return this;\n  },\n  remove: proto.remove,\n  clear: proto.clear,\n  values: proto.keys,\n  size: proto.size,\n  empty: proto.empty,\n  each: proto.each\n};\n\nfunction set$1(object, f) {\n  var set = new Set(); // Copy constructor.\n\n  if (object instanceof Set) object.each(function (value) {\n    set.add(value);\n  }); // Otherwise, assume it’s an array.\n  else if (object) {\n      var i = -1,\n          n = object.length;\n      if (f == null) while (++i < n) {\n        set.add(object[i]);\n      } else while (++i < n) {\n        set.add(f(object[i], i, object));\n      }\n    }\n  return set;\n}\n\nvar array$1 = Array.prototype;\nvar map$2 = array$1.map;\nvar slice$2 = array$1.slice;\nvar implicit = {\n  name: \"implicit\"\n};\n\nfunction ordinal(range) {\n  var index = map$1(),\n      domain = [],\n      unknown = implicit;\n  range = range == null ? [] : slice$2.call(range);\n\n  function scale(d) {\n    var key = d + \"\",\n        i = index.get(key);\n\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = map$1();\n    var i = -1,\n        n = _.length,\n        d,\n        key;\n\n    while (++i < n) {\n      if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n    }\n\n    return scale;\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = slice$2.call(_), scale) : range.slice();\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function () {\n    return ordinal().domain(domain).range(range).unknown(unknown);\n  };\n\n  return scale;\n}\n\nfunction band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      range$$1 = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = range$$1[1] < range$$1[0],\n        start = range$$1[reverse - 0],\n        stop = range$$1[1 - reverse];\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = range(n).map(function (i) {\n      return start + step * i;\n    });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function (_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();\n  };\n\n  scale.rangeRound = function (_) {\n    return range$$1 = [+_[0], +_[1]], round = true, rescale();\n  };\n\n  scale.bandwidth = function () {\n    return bandwidth;\n  };\n\n  scale.step = function () {\n    return step;\n  };\n\n  scale.round = function (_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function (_) {\n    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function (_) {\n    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function (_) {\n    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n  };\n\n  scale.align = function (_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function () {\n    return band().domain(domain()).range(range$$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);\n  };\n\n  return rescale();\n}\n\nfunction define(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nfunction extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n\n  for (var key in definition) {\n    prototype[key] = definition[key];\n  }\n\n  return prototype;\n}\n\nfunction Color() {}\n\nvar _darker = 0.7;\n\nvar _brighter = 1 / _darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex3 = /^#([0-9a-f]{3})$/,\n    reHex6 = /^#([0-9a-f]{6})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\ndefine(Color, color, {\n  displayable: function displayable() {\n    return this.rgb().displayable();\n  },\n  hex: function hex() {\n    return this.rgb().hex();\n  },\n  toString: function toString() {\n    return this.rgb() + \"\";\n  }\n});\n\nfunction color(format) {\n  var m;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00\n  ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n  : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n  : named.hasOwnProperty(format) ? rgbn(named[format]) : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0) : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nfunction rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb();\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nfunction rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nfunction Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function brighter(k) {\n    k = k == null ? _brighter : Math.pow(_brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function darker(k) {\n    k = k == null ? _darker : Math.pow(_darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function rgb() {\n    return this;\n  },\n  displayable: function displayable() {\n    return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;\n  },\n  hex: function hex() {\n    return \"#\" + _hex(this.r) + _hex(this.g) + _hex(this.b);\n  },\n  toString: function toString() {\n    var a = this.opacity;\n    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"rgb(\" : \"rgba(\") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\nfunction _hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nfunction hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl();\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n\n  return new Hsl(h, s, l, o.opacity);\n}\n\nfunction hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function brighter(k) {\n    k = k == null ? _brighter : Math.pow(_brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function darker(k) {\n    k = k == null ? _darker : Math.pow(_darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);\n  },\n  displayable: function displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n  }\n}));\n/* From FvD 13.37, CSS Color Module Level 3 */\n\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;\n}\n\nvar deg2rad = Math.PI / 180;\nvar rad2deg = 180 / Math.PI; // https://beta.observablehq.com/@mbostock/lab-and-rgb\n\nvar K = 18,\n    Xn = 0.96422,\n    Yn = 1,\n    Zn = 0.82521,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n\nfunction labConvert(o) {\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n\n  if (o instanceof Hcl) {\n    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n    var h = o.h * deg2rad;\n    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n  }\n\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = rgb2lrgb(o.r),\n      g = rgb2lrgb(o.g),\n      b = rgb2lrgb(o.b),\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),\n      x,\n      z;\n  if (r === g && g === b) x = z = y;else {\n    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n  }\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n}\n\nfunction lab(l, a, b, opacity) {\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n}\n\nfunction Lab(l, a, b, opacity) {\n  this.l = +l;\n  this.a = +a;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Lab, lab, extend(Color, {\n  brighter: function brighter(k) {\n    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  darker: function darker(k) {\n    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  rgb: function rgb() {\n    var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n    x = Xn * lab2xyz(x);\n    y = Yn * lab2xyz(y);\n    z = Zn * lab2xyz(z);\n    return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);\n  }\n}));\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction lrgb2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2lrgb(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction hclConvert(o) {\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n  if (!(o instanceof Lab)) o = labConvert(o);\n  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0, o.l, o.opacity);\n  var h = Math.atan2(o.b, o.a) * rad2deg;\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n}\n\nfunction hcl(h, c, l, opacity) {\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hcl(h, c, l, opacity) {\n  this.h = +h;\n  this.c = +c;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hcl, hcl, extend(Color, {\n  brighter: function brighter(k) {\n    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n  },\n  darker: function darker(k) {\n    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n  },\n  rgb: function rgb() {\n    return labConvert(this).rgb();\n  }\n}));\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),\n      // NaN if l=0 or l=1\n  h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nfunction cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter: function brighter(k) {\n    k = k == null ? _brighter : Math.pow(_brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function darker(k) {\n    k = k == null ? _darker : Math.pow(_darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function rgb() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);\n  }\n}));\n\nfunction constant$3(x) {\n  return function () {\n    return x;\n  };\n}\n\nfunction linear(a, d) {\n  return function (t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nfunction gamma(y) {\n  return (y = +y) === 1 ? nogamma : function (a, b) {\n    return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);\n  };\n}\n\nfunction nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);\n}\n\nvar rgb$1 = function rgbGamma(y) {\n  var color$$1 = gamma(y);\n\n  function rgb$$1(start, end) {\n    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),\n        g = color$$1(start.g, end.g),\n        b = color$$1(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function (t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb$$1.gamma = rgbGamma;\n  return rgb$$1;\n}(1);\n\nfunction array$2(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) {\n    x[i] = value(a[i], b[i]);\n  }\n\n  for (; i < nb; ++i) {\n    c[i] = b[i];\n  }\n\n  return function (t) {\n    for (i = 0; i < na; ++i) {\n      c[i] = x[i](t);\n    }\n\n    return c;\n  };\n}\n\nfunction date(a, b) {\n  var d = new Date();\n  return a = +a, b -= a, function (t) {\n    return d.setTime(a + b * t), d;\n  };\n}\n\nfunction number$1(a, b) {\n  return a = +a, b -= a, function (t) {\n    return a + b * t;\n  };\n}\n\nfunction object(a, b) {\n  var i = {},\n      c = {},\n      k;\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function (t) {\n    for (k in i) {\n      c[k] = i[k](t);\n    }\n\n    return c;\n  };\n}\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function () {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function (t) {\n    return b(t) + \"\";\n  };\n}\n\nfunction string(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0,\n      // scan index for next number in b\n  am,\n      // current match in a\n  bm,\n      // current match in b\n  bs,\n      // string preceding current number in b, if any\n  i = -1,\n      // index in s\n  s = [],\n      // string constants and placeholders\n  q = []; // number interpolators\n  // Coerce inputs to strings.\n\n  a = a + \"\", b = b + \"\"; // Interpolate pairs of numbers in a & b.\n\n  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) {\n      // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    if ((am = am[0]) === (bm = bm[0])) {\n      // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else {\n      // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({\n        i: i,\n        x: number$1(am, bm)\n      });\n    }\n\n    bi = reB.lastIndex;\n  } // Add remains of b.\n\n\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  } // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n\n\n  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {\n    for (var i = 0, o; i < b; ++i) {\n      s[(o = q[i]).i] = o.x(t);\n    }\n\n    return s.join(\"\");\n  });\n}\n\nfunction value(a, b) {\n  var t = typeof b,\n      c;\n  return b == null || t === \"boolean\" ? constant$3(b) : (t === \"number\" ? number$1 : t === \"string\" ? (c = color(b)) ? (b = c, rgb$1) : string : b instanceof color ? rgb$1 : b instanceof Date ? date : Array.isArray(b) ? array$2 : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object : number$1)(a, b);\n}\n\nfunction interpolateRound(a, b) {\n  return a = +a, b -= a, function (t) {\n    return Math.round(a + b * t);\n  };\n}\n\nvar degrees = 180 / Math.PI;\nvar rho = Math.SQRT2;\n\nfunction constant$4(x) {\n  return function () {\n    return x;\n  };\n}\n\nfunction number$2(x) {\n  return +x;\n}\n\nvar unit = [0, 1];\n\nfunction deinterpolateLinear(a, b) {\n  return (b -= a = +a) ? function (x) {\n    return (x - a) / b;\n  } : constant$4(b);\n}\n\nfunction deinterpolateClamp(deinterpolate) {\n  return function (a, b) {\n    var d = deinterpolate(a = +a, b = +b);\n    return function (x) {\n      return x <= a ? 0 : x >= b ? 1 : d(x);\n    };\n  };\n}\n\nfunction reinterpolateClamp(reinterpolate) {\n  return function (a, b) {\n    var r = reinterpolate(a = +a, b = +b);\n    return function (t) {\n      return t <= 0 ? a : t >= 1 ? b : r(t);\n    };\n  };\n}\n\nfunction bimap(domain, range$$1, deinterpolate, reinterpolate) {\n  var d0 = domain[0],\n      d1 = domain[1],\n      r0 = range$$1[0],\n      r1 = range$$1[1];\n  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n  return function (x) {\n    return r0(d0(x));\n  };\n}\n\nfunction polymap(domain, range$$1, deinterpolate, reinterpolate) {\n  var j = Math.min(domain.length, range$$1.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1; // Reverse descending domains.\n\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range$$1 = range$$1.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = deinterpolate(domain[i], domain[i + 1]);\n    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);\n  }\n\n  return function (x) {\n    var i = bisectRight(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nfunction copy(source, target) {\n  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());\n} // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\n\n\nfunction continuous(deinterpolate, reinterpolate) {\n  var domain = unit,\n      range$$1 = unit,\n      interpolate$$1 = value,\n      clamp = false,\n      piecewise$$1,\n      output,\n      input;\n\n  function rescale() {\n    piecewise$$1 = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return (output || (output = piecewise$$1(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);\n  }\n\n  scale.invert = function (y) {\n    return (input || (input = piecewise$$1(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n  };\n\n  scale.domain = function (_) {\n    return arguments.length ? (domain = map$2.call(_, number$2), rescale()) : domain.slice();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range$$1 = slice$2.call(_), rescale()) : range$$1.slice();\n  };\n\n  scale.rangeRound = function (_) {\n    return range$$1 = slice$2.call(_), interpolate$$1 = interpolateRound, rescale();\n  };\n\n  scale.clamp = function (_) {\n    return arguments.length ? (clamp = !!_, rescale()) : clamp;\n  };\n\n  scale.interpolate = function (_) {\n    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;\n  };\n\n  return rescale();\n} // Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\n\n\nfunction formatDecimal(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n\n  var i,\n      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n\n  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];\n}\n\nfunction exponent(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n\nfunction formatGroup(grouping, thousands) {\n  return function (value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n\nfunction formatNumerals(numerals) {\n  return function (value) {\n    return value.replace(/[0-9]/g, function (i) {\n      return numerals[+i];\n    });\n  };\n} // [[fill]align][sign][symbol][0][width][,][.precision][~][type]\n\n\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  this.fill = match[1] || \" \";\n  this.align = match[2] || \">\";\n  this.sign = match[3] || \"-\";\n  this.symbol = match[4] || \"\";\n  this.zero = !!match[5];\n  this.width = match[6] && +match[6];\n  this.comma = !!match[7];\n  this.precision = match[8] && +match[8].slice(1);\n  this.trim = !!match[9];\n  this.type = match[10] || \"\";\n}\n\nFormatSpecifier.prototype.toString = function () {\n  return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width == null ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0)) + (this.trim ? \"~\" : \"\") + this.type;\n}; // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\n\n\nfunction formatTrim(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\":\n        i0 = i1 = i;\n        break;\n\n      case \"0\":\n        if (i0 === 0) i0 = i;\n        i1 = i;\n        break;\n\n      default:\n        if (i0 > 0) {\n          if (!+s[i]) break out;\n          i0 = 0;\n        }\n\n        break;\n    }\n  }\n\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n\nvar prefixExponent;\n\nfunction formatPrefixAuto(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join(\"0\") : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i) : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n\nfunction formatRounded(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n\nvar formatTypes = {\n  \"%\": function _(x, p) {\n    return (x * 100).toFixed(p);\n  },\n  \"b\": function b(x) {\n    return Math.round(x).toString(2);\n  },\n  \"c\": function c(x) {\n    return x + \"\";\n  },\n  \"d\": function d(x) {\n    return Math.round(x).toString(10);\n  },\n  \"e\": function e(x, p) {\n    return x.toExponential(p);\n  },\n  \"f\": function f(x, p) {\n    return x.toFixed(p);\n  },\n  \"g\": function g(x, p) {\n    return x.toPrecision(p);\n  },\n  \"o\": function o(x) {\n    return Math.round(x).toString(8);\n  },\n  \"p\": function p(x, _p) {\n    return formatRounded(x * 100, _p);\n  },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function X(x) {\n    return Math.round(x).toString(16).toUpperCase();\n  },\n  \"x\": function x(_x) {\n    return Math.round(_x).toString(16);\n  }\n};\n\nfunction identity$5(x) {\n  return x;\n}\n\nvar prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n\nfunction formatLocale(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$5,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$5,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type; // The \"n\" type is an alias for \",g\".\n\n    if (type === \"n\") comma = true, type = \"g\"; // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = \"g\"; // If zero fill is specified, padding goes after sign and before digits.\n\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\"; // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    precision = precision == null ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i,\n          n,\n          c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value; // Perform the initial formatting.\n\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision); // Trim insignificant zeros.\n\n        if (trim) value = formatTrim(value); // If a negative value rounds to zero during formatting, treat as positive.\n\n        if (valueNegative && +value === 0) valueNegative = false; // Compute the prefix and suffix.\n\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : \"-\" : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not \"0\", grouping is applied before padding.\n\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function () {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n\nvar locale;\nvar format;\nvar formatPrefix;\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nfunction defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n\nfunction precisionFixed(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n\nfunction precisionPrefix(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n\nfunction precisionRound(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n\nfunction tickFormat(domain, count, specifier) {\n  var start = domain[0],\n      stop = domain[domain.length - 1],\n      step = tickStep(start, stop, count == null ? 10 : count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n\n  switch (specifier.type) {\n    case \"s\":\n      {\n        var value = Math.max(Math.abs(start), Math.abs(stop));\n        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n        return formatPrefix(specifier, value);\n      }\n\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\":\n      {\n        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n        break;\n      }\n\n    case \"f\":\n    case \"%\":\n      {\n        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n        break;\n      }\n  }\n\n  return format(specifier);\n}\n\nfunction linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function (count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    return tickFormat(domain(), count, specifier);\n  };\n\n  scale.nice = function (count) {\n    if (count == null) count = 10;\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nfunction linear$1() {\n  var scale = continuous(deinterpolateLinear, number$1);\n\n  scale.copy = function () {\n    return copy(scale, linear$1());\n  };\n\n  return linearish(scale);\n}\n\nfunction nice(domain, interval) {\n  domain = domain.slice();\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n\nfunction deinterpolate(a, b) {\n  return (b = Math.log(b / a)) ? function (x) {\n    return Math.log(x / a) / b;\n  } : constant$4(b);\n}\n\nfunction reinterpolate(a, b) {\n  return a < 0 ? function (t) {\n    return -Math.pow(-b, t) * Math.pow(-a, 1 - t);\n  } : function (t) {\n    return Math.pow(b, t) * Math.pow(a, 1 - t);\n  };\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {\n    return Math.pow(base, x);\n  };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {\n    return Math.log(x) / base;\n  });\n}\n\nfunction reflect(f) {\n  return function (x) {\n    return -f(-x);\n  };\n}\n\nfunction log() {\n  var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),\n      domain = scale.domain,\n      base = 10,\n      logs = logp(10),\n      pows = powp(10);\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\n    return scale;\n  }\n\n  scale.base = function (_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function (_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function (count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n    if (r = v < u) i = u, u = v, v = i;\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\n      if (u > 0) for (; i < j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i < j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = format(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n\n    return function (d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = function () {\n    return domain(nice(domain(), {\n      floor: function floor(x) {\n        return pows(Math.floor(logs(x)));\n      },\n      ceil: function ceil(x) {\n        return pows(Math.ceil(logs(x)));\n      }\n    }));\n  };\n\n  scale.copy = function () {\n    return copy(scale, log().base(base));\n  };\n\n  return scale;\n}\n\nvar t0$1 = new Date(),\n    t1$1 = new Date();\n\nfunction newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = new Date(+date)), date;\n  }\n\n  interval.floor = interval;\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0$1.setTime(+start), t1$1.setTime(+end);\n      floori(t0$1), floori(t1$1);\n      return Math.floor(count(t0$1, t1$1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}\n\nvar millisecond = newInterval(function () {// noop\n}, function (date, step) {\n  date.setTime(+date + step);\n}, function (start, end) {\n  return end - start;\n}); // An optimized implementation for this simple case.\n\nmillisecond.every = function (k) {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return newInterval(function (date) {\n    date.setTime(Math.floor(date / k) * k);\n  }, function (date, step) {\n    date.setTime(+date + step * k);\n  }, function (start, end) {\n    return (end - start) / k;\n  });\n};\n\nvar milliseconds = millisecond.range;\nvar durationSecond = 1e3;\nvar durationMinute = 6e4;\nvar durationHour = 36e5;\nvar durationDay = 864e5;\nvar durationWeek = 6048e5;\nvar second = newInterval(function (date) {\n  date.setTime(Math.floor(date / durationSecond) * durationSecond);\n}, function (date, step) {\n  date.setTime(+date + step * durationSecond);\n}, function (start, end) {\n  return (end - start) / durationSecond;\n}, function (date) {\n  return date.getUTCSeconds();\n});\nvar seconds = second.range;\nvar minute = newInterval(function (date) {\n  date.setTime(Math.floor(date / durationMinute) * durationMinute);\n}, function (date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function (start, end) {\n  return (end - start) / durationMinute;\n}, function (date) {\n  return date.getMinutes();\n});\nvar minutes = minute.range;\nvar hour = newInterval(function (date) {\n  var offset = date.getTimezoneOffset() * durationMinute % durationHour;\n  if (offset < 0) offset += durationHour;\n  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);\n}, function (date, step) {\n  date.setTime(+date + step * durationHour);\n}, function (start, end) {\n  return (end - start) / durationHour;\n}, function (date) {\n  return date.getHours();\n});\nvar hours = hour.range;\nvar day = newInterval(function (date) {\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function (date) {\n  return date.getDate() - 1;\n});\nvar days = day.range;\n\nfunction weekday(i) {\n  return newInterval(function (date) {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setDate(date.getDate() + step * 7);\n  }, function (start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nvar sunday = weekday(0);\nvar monday = weekday(1);\nvar tuesday = weekday(2);\nvar wednesday = weekday(3);\nvar thursday = weekday(4);\nvar friday = weekday(5);\nvar saturday = weekday(6);\nvar sundays = sunday.range;\nvar mondays = monday.range;\nvar thursdays = thursday.range;\nvar month = newInterval(function (date) {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setMonth(date.getMonth() + step);\n}, function (start, end) {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, function (date) {\n  return date.getMonth();\n});\nvar months = month.range;\nvar year = newInterval(function (date) {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setFullYear(date.getFullYear() + step);\n}, function (start, end) {\n  return end.getFullYear() - start.getFullYear();\n}, function (date) {\n  return date.getFullYear();\n}); // An optimized implementation for this simple case.\n\nyear.every = function (k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nvar years = year.range;\nvar utcMinute = newInterval(function (date) {\n  date.setUTCSeconds(0, 0);\n}, function (date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function (start, end) {\n  return (end - start) / durationMinute;\n}, function (date) {\n  return date.getUTCMinutes();\n});\nvar utcMinutes = utcMinute.range;\nvar utcHour = newInterval(function (date) {\n  date.setUTCMinutes(0, 0, 0);\n}, function (date, step) {\n  date.setTime(+date + step * durationHour);\n}, function (start, end) {\n  return (end - start) / durationHour;\n}, function (date) {\n  return date.getUTCHours();\n});\nvar utcHours = utcHour.range;\nvar utcDay = newInterval(function (date) {\n  date.setUTCHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setUTCDate(date.getUTCDate() + step);\n}, function (start, end) {\n  return (end - start) / durationDay;\n}, function (date) {\n  return date.getUTCDate() - 1;\n});\nvar utcDays = utcDay.range;\n\nfunction utcWeekday(i) {\n  return newInterval(function (date) {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, function (start, end) {\n    return (end - start) / durationWeek;\n  });\n}\n\nvar utcSunday = utcWeekday(0);\nvar utcMonday = utcWeekday(1);\nvar utcTuesday = utcWeekday(2);\nvar utcWednesday = utcWeekday(3);\nvar utcThursday = utcWeekday(4);\nvar utcFriday = utcWeekday(5);\nvar utcSaturday = utcWeekday(6);\nvar utcSundays = utcSunday.range;\nvar utcMondays = utcMonday.range;\nvar utcThursdays = utcThursday.range;\nvar utcMonth = newInterval(function (date) {\n  date.setUTCDate(1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setUTCMonth(date.getUTCMonth() + step);\n}, function (start, end) {\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n}, function (date) {\n  return date.getUTCMonth();\n});\nvar utcMonths = utcMonth.range;\nvar utcYear = newInterval(function (date) {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, function (start, end) {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, function (date) {\n  return date.getUTCFullYear();\n}); // An optimized implementation for this simple case.\n\nutcYear.every = function (k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nvar utcYears = utcYear.range;\n\nfunction localDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n    date.setFullYear(d.y);\n    return date;\n  }\n\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n}\n\nfunction utcDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n    date.setUTCFullYear(d.y);\n    return date;\n  }\n\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n}\n\nfunction newYear(y) {\n  return {\n    y: y,\n    m: 0,\n    d: 1,\n    H: 0,\n    M: 0,\n    S: 0,\n    L: 0\n  };\n}\n\nfunction formatLocale$1(locale) {\n  var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n  var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n  var formats = {\n    \"a\": formatShortWeekday,\n    \"A\": formatWeekday,\n    \"b\": formatShortMonth,\n    \"B\": formatMonth,\n    \"c\": null,\n    \"d\": formatDayOfMonth,\n    \"e\": formatDayOfMonth,\n    \"f\": formatMicroseconds,\n    \"H\": formatHour24,\n    \"I\": formatHour12,\n    \"j\": formatDayOfYear,\n    \"L\": formatMilliseconds,\n    \"m\": formatMonthNumber,\n    \"M\": formatMinutes,\n    \"p\": formatPeriod,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatSeconds,\n    \"u\": formatWeekdayNumberMonday,\n    \"U\": formatWeekNumberSunday,\n    \"V\": formatWeekNumberISO,\n    \"w\": formatWeekdayNumberSunday,\n    \"W\": formatWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatYear,\n    \"Y\": formatFullYear,\n    \"Z\": formatZone,\n    \"%\": formatLiteralPercent\n  };\n  var utcFormats = {\n    \"a\": formatUTCShortWeekday,\n    \"A\": formatUTCWeekday,\n    \"b\": formatUTCShortMonth,\n    \"B\": formatUTCMonth,\n    \"c\": null,\n    \"d\": formatUTCDayOfMonth,\n    \"e\": formatUTCDayOfMonth,\n    \"f\": formatUTCMicroseconds,\n    \"H\": formatUTCHour24,\n    \"I\": formatUTCHour12,\n    \"j\": formatUTCDayOfYear,\n    \"L\": formatUTCMilliseconds,\n    \"m\": formatUTCMonthNumber,\n    \"M\": formatUTCMinutes,\n    \"p\": formatUTCPeriod,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatUTCSeconds,\n    \"u\": formatUTCWeekdayNumberMonday,\n    \"U\": formatUTCWeekNumberSunday,\n    \"V\": formatUTCWeekNumberISO,\n    \"w\": formatUTCWeekdayNumberSunday,\n    \"W\": formatUTCWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatUTCYear,\n    \"Y\": formatUTCFullYear,\n    \"Z\": formatUTCZone,\n    \"%\": formatLiteralPercent\n  };\n  var parses = {\n    \"a\": parseShortWeekday,\n    \"A\": parseWeekday,\n    \"b\": parseShortMonth,\n    \"B\": parseMonth,\n    \"c\": parseLocaleDateTime,\n    \"d\": parseDayOfMonth,\n    \"e\": parseDayOfMonth,\n    \"f\": parseMicroseconds,\n    \"H\": parseHour24,\n    \"I\": parseHour24,\n    \"j\": parseDayOfYear,\n    \"L\": parseMilliseconds,\n    \"m\": parseMonthNumber,\n    \"M\": parseMinutes,\n    \"p\": parsePeriod,\n    \"Q\": parseUnixTimestamp,\n    \"s\": parseUnixTimestampSeconds,\n    \"S\": parseSeconds,\n    \"u\": parseWeekdayNumberMonday,\n    \"U\": parseWeekNumberSunday,\n    \"V\": parseWeekNumberISO,\n    \"w\": parseWeekdayNumberSunday,\n    \"W\": parseWeekNumberMonday,\n    \"x\": parseLocaleDate,\n    \"X\": parseLocaleTime,\n    \"y\": parseYear,\n    \"Y\": parseFullYear,\n    \"Z\": parseZone,\n    \"%\": parseLiteralPercent\n  }; // These recursive directive definitions must be deferred.\n\n  formats.x = newFormat(locale_date, formats);\n  formats.X = newFormat(locale_time, formats);\n  formats.c = newFormat(locale_dateTime, formats);\n  utcFormats.x = newFormat(locale_date, utcFormats);\n  utcFormats.X = newFormat(locale_time, utcFormats);\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n  function newFormat(specifier, formats) {\n    return function (date) {\n      var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n      if (!(date instanceof Date)) date = new Date(+date);\n\n      while (++i < n) {\n        if (specifier.charCodeAt(i) === 37) {\n          string.push(specifier.slice(j, i));\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === \"e\" ? \" \" : \"0\";\n          if (format = formats[c]) c = format(date, pad);\n          string.push(c);\n          j = i + 1;\n        }\n      }\n\n      string.push(specifier.slice(j, i));\n      return string.join(\"\");\n    };\n  }\n\n  function newParse(specifier, newDate) {\n    return function (string) {\n      var d = newYear(1900),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week,\n          day$$1;\n      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.\n\n      if (\"Q\" in d) return new Date(d.Q); // The am-pm flag is 0 for AM, and 1 for PM.\n\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12; // Convert day-of-week and week-of-year to day-of-year.\n\n      if (\"V\" in d) {\n        if (d.V < 1 || d.V > 53) return null;\n        if (!(\"w\" in d)) d.w = 1;\n\n        if (\"Z\" in d) {\n          week = utcDate(newYear(d.y)), day$$1 = week.getUTCDay();\n          week = day$$1 > 4 || day$$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);\n          week = utcDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getUTCFullYear();\n          d.m = week.getUTCMonth();\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\n        } else {\n          week = newDate(newYear(d.y)), day$$1 = week.getDay();\n          week = day$$1 > 4 || day$$1 === 0 ? monday.ceil(week) : monday(week);\n          week = day.offset(week, (d.V - 1) * 7);\n          d.y = week.getFullYear();\n          d.m = week.getMonth();\n          d.d = week.getDate() + (d.w + 6) % 7;\n        }\n      } else if (\"W\" in d || \"U\" in d) {\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n        day$$1 = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n        d.m = 0;\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;\n      } // If a time zone is specified, all fields are interpreted as UTC and then\n      // offset according to the specified time zone.\n\n\n      if (\"Z\" in d) {\n        d.H += d.Z / 100 | 0;\n        d.M += d.Z % 100;\n        return utcDate(d);\n      } // Otherwise, all fields are in local time.\n\n\n      return newDate(d);\n    };\n  }\n\n  function parseSpecifier(d, specifier, string, j) {\n    var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n\n    while (i < n) {\n      if (j >= m) return -1;\n      c = specifier.charCodeAt(i++);\n\n      if (c === 37) {\n        c = specifier.charAt(i++);\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\n        if (!parse || (j = parse(d, string, j)) < 0) return -1;\n      } else if (c != string.charCodeAt(j++)) {\n        return -1;\n      }\n    }\n\n    return j;\n  }\n\n  function parsePeriod(d, string, i) {\n    var n = periodRe.exec(string.slice(i));\n    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortWeekday(d, string, i) {\n    var n = shortWeekdayRe.exec(string.slice(i));\n    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseWeekday(d, string, i) {\n    var n = weekdayRe.exec(string.slice(i));\n    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortMonth(d, string, i) {\n    var n = shortMonthRe.exec(string.slice(i));\n    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseMonth(d, string, i) {\n    var n = monthRe.exec(string.slice(i));\n    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseLocaleDateTime(d, string, i) {\n    return parseSpecifier(d, locale_dateTime, string, i);\n  }\n\n  function parseLocaleDate(d, string, i) {\n    return parseSpecifier(d, locale_date, string, i);\n  }\n\n  function parseLocaleTime(d, string, i) {\n    return parseSpecifier(d, locale_time, string, i);\n  }\n\n  function formatShortWeekday(d) {\n    return locale_shortWeekdays[d.getDay()];\n  }\n\n  function formatWeekday(d) {\n    return locale_weekdays[d.getDay()];\n  }\n\n  function formatShortMonth(d) {\n    return locale_shortMonths[d.getMonth()];\n  }\n\n  function formatMonth(d) {\n    return locale_months[d.getMonth()];\n  }\n\n  function formatPeriod(d) {\n    return locale_periods[+(d.getHours() >= 12)];\n  }\n\n  function formatUTCShortWeekday(d) {\n    return locale_shortWeekdays[d.getUTCDay()];\n  }\n\n  function formatUTCWeekday(d) {\n    return locale_weekdays[d.getUTCDay()];\n  }\n\n  function formatUTCShortMonth(d) {\n    return locale_shortMonths[d.getUTCMonth()];\n  }\n\n  function formatUTCMonth(d) {\n    return locale_months[d.getUTCMonth()];\n  }\n\n  function formatUTCPeriod(d) {\n    return locale_periods[+(d.getUTCHours() >= 12)];\n  }\n\n  return {\n    format: function format(specifier) {\n      var f = newFormat(specifier += \"\", formats);\n\n      f.toString = function () {\n        return specifier;\n      };\n\n      return f;\n    },\n    parse: function parse(specifier) {\n      var p = newParse(specifier += \"\", localDate);\n\n      p.toString = function () {\n        return specifier;\n      };\n\n      return p;\n    },\n    utcFormat: function utcFormat(specifier) {\n      var f = newFormat(specifier += \"\", utcFormats);\n\n      f.toString = function () {\n        return specifier;\n      };\n\n      return f;\n    },\n    utcParse: function utcParse(specifier) {\n      var p = newParse(specifier, utcDate);\n\n      p.toString = function () {\n        return specifier;\n      };\n\n      return p;\n    }\n  };\n}\n\nvar pads = {\n  \"-\": \"\",\n  \"_\": \" \",\n  \"0\": \"0\"\n},\n    numberRe = /^\\s*\\d+/,\n    // note: ignores next directive\npercentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\nfunction pad(value, fill, width) {\n  var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n}\n\nfunction requote(s) {\n  return s.replace(requoteRe, \"\\\\$&\");\n}\n\nfunction formatRe(names) {\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n}\n\nfunction formatLookup(names) {\n  var map = {},\n      i = -1,\n      n = names.length;\n\n  while (++i < n) {\n    map[names[i].toLowerCase()] = i;\n  }\n\n  return map;\n}\n\nfunction parseWeekdayNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekdayNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberISO(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseFullYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 4));\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n}\n\nfunction parseZone(d, string, i) {\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n}\n\nfunction parseMonthNumber(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n}\n\nfunction parseDayOfMonth(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseDayOfYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseHour24(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMinutes(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMilliseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMicroseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 6));\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n}\n\nfunction parseLiteralPercent(d, string, i) {\n  var n = percentRe.exec(string.slice(i, i + 1));\n  return n ? i + n[0].length : -1;\n}\n\nfunction parseUnixTimestamp(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseUnixTimestampSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0] * 1000, i + n[0].length) : -1;\n}\n\nfunction formatDayOfMonth(d, p) {\n  return pad(d.getDate(), p, 2);\n}\n\nfunction formatHour24(d, p) {\n  return pad(d.getHours(), p, 2);\n}\n\nfunction formatHour12(d, p) {\n  return pad(d.getHours() % 12 || 12, p, 2);\n}\n\nfunction formatDayOfYear(d, p) {\n  return pad(1 + day.count(year(d), d), p, 3);\n}\n\nfunction formatMilliseconds(d, p) {\n  return pad(d.getMilliseconds(), p, 3);\n}\n\nfunction formatMicroseconds(d, p) {\n  return formatMilliseconds(d, p) + \"000\";\n}\n\nfunction formatMonthNumber(d, p) {\n  return pad(d.getMonth() + 1, p, 2);\n}\n\nfunction formatMinutes(d, p) {\n  return pad(d.getMinutes(), p, 2);\n}\n\nfunction formatSeconds(d, p) {\n  return pad(d.getSeconds(), p, 2);\n}\n\nfunction formatWeekdayNumberMonday(d) {\n  var day$$1 = d.getDay();\n  return day$$1 === 0 ? 7 : day$$1;\n}\n\nfunction formatWeekNumberSunday(d, p) {\n  return pad(sunday.count(year(d), d), p, 2);\n}\n\nfunction formatWeekNumberISO(d, p) {\n  var day$$1 = d.getDay();\n  d = day$$1 >= 4 || day$$1 === 0 ? thursday(d) : thursday.ceil(d);\n  return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);\n}\n\nfunction formatWeekdayNumberSunday(d) {\n  return d.getDay();\n}\n\nfunction formatWeekNumberMonday(d, p) {\n  return pad(monday.count(year(d), d), p, 2);\n}\n\nfunction formatYear(d, p) {\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatFullYear(d, p) {\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatZone(d) {\n  var z = d.getTimezoneOffset();\n  return (z > 0 ? \"-\" : (z *= -1, \"+\")) + pad(z / 60 | 0, \"0\", 2) + pad(z % 60, \"0\", 2);\n}\n\nfunction formatUTCDayOfMonth(d, p) {\n  return pad(d.getUTCDate(), p, 2);\n}\n\nfunction formatUTCHour24(d, p) {\n  return pad(d.getUTCHours(), p, 2);\n}\n\nfunction formatUTCHour12(d, p) {\n  return pad(d.getUTCHours() % 12 || 12, p, 2);\n}\n\nfunction formatUTCDayOfYear(d, p) {\n  return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n}\n\nfunction formatUTCMilliseconds(d, p) {\n  return pad(d.getUTCMilliseconds(), p, 3);\n}\n\nfunction formatUTCMicroseconds(d, p) {\n  return formatUTCMilliseconds(d, p) + \"000\";\n}\n\nfunction formatUTCMonthNumber(d, p) {\n  return pad(d.getUTCMonth() + 1, p, 2);\n}\n\nfunction formatUTCMinutes(d, p) {\n  return pad(d.getUTCMinutes(), p, 2);\n}\n\nfunction formatUTCSeconds(d, p) {\n  return pad(d.getUTCSeconds(), p, 2);\n}\n\nfunction formatUTCWeekdayNumberMonday(d) {\n  var dow = d.getUTCDay();\n  return dow === 0 ? 7 : dow;\n}\n\nfunction formatUTCWeekNumberSunday(d, p) {\n  return pad(utcSunday.count(utcYear(d), d), p, 2);\n}\n\nfunction formatUTCWeekNumberISO(d, p) {\n  var day$$1 = d.getUTCDay();\n  d = day$$1 >= 4 || day$$1 === 0 ? utcThursday(d) : utcThursday.ceil(d);\n  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n}\n\nfunction formatUTCWeekdayNumberSunday(d) {\n  return d.getUTCDay();\n}\n\nfunction formatUTCWeekNumberMonday(d, p) {\n  return pad(utcMonday.count(utcYear(d), d), p, 2);\n}\n\nfunction formatUTCYear(d, p) {\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCFullYear(d, p) {\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCZone() {\n  return \"+0000\";\n}\n\nfunction formatLiteralPercent() {\n  return \"%\";\n}\n\nfunction formatUnixTimestamp(d) {\n  return +d;\n}\n\nfunction formatUnixTimestampSeconds(d) {\n  return Math.floor(+d / 1000);\n}\n\nvar locale$1;\nvar timeFormat;\nvar timeParse;\nvar utcFormat;\nvar utcParse;\ndefaultLocale$1({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n\nfunction defaultLocale$1(definition) {\n  locale$1 = formatLocale$1(definition);\n  timeFormat = locale$1.format;\n  timeParse = locale$1.parse;\n  utcFormat = locale$1.utcFormat;\n  utcParse = locale$1.utcParse;\n  return locale$1;\n}\n\nvar isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\nfunction formatIsoNative(date) {\n  return date.toISOString();\n}\n\nvar formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);\n\nfunction parseIsoNative(string) {\n  var date = new Date(string);\n  return isNaN(date) ? null : date;\n}\n\nvar parseIso = +new Date(\"2000-01-01T00:00:00.000Z\") ? parseIsoNative : utcParse(isoSpecifier);\nvar durationSecond$1 = 1000,\n    durationMinute$1 = durationSecond$1 * 60,\n    durationHour$1 = durationMinute$1 * 60,\n    durationDay$1 = durationHour$1 * 24,\n    durationWeek$1 = durationDay$1 * 7,\n    durationMonth = durationDay$1 * 30,\n    durationYear = durationDay$1 * 365;\n\nfunction date$1(t) {\n  return new Date(t);\n}\n\nfunction number$3(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nfunction calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {\n  var scale = continuous(deinterpolateLinear, number$1),\n      invert = scale.invert,\n      domain = scale.domain;\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n  var tickIntervals = [[second$$1, 1, durationSecond$1], [second$$1, 5, 5 * durationSecond$1], [second$$1, 15, 15 * durationSecond$1], [second$$1, 30, 30 * durationSecond$1], [minute$$1, 1, durationMinute$1], [minute$$1, 5, 5 * durationMinute$1], [minute$$1, 15, 15 * durationMinute$1], [minute$$1, 30, 30 * durationMinute$1], [hour$$1, 1, durationHour$1], [hour$$1, 3, 3 * durationHour$1], [hour$$1, 6, 6 * durationHour$1], [hour$$1, 12, 12 * durationHour$1], [day$$1, 1, durationDay$1], [day$$1, 2, 2 * durationDay$1], [week, 1, durationWeek$1], [month$$1, 1, durationMonth], [month$$1, 3, 3 * durationMonth], [year$$1, 1, durationYear]];\n\n  function tickFormat(date$$1) {\n    return (second$$1(date$$1) < date$$1 ? formatMillisecond : minute$$1(date$$1) < date$$1 ? formatSecond : hour$$1(date$$1) < date$$1 ? formatMinute : day$$1(date$$1) < date$$1 ? formatHour : month$$1(date$$1) < date$$1 ? week(date$$1) < date$$1 ? formatDay : formatWeek : year$$1(date$$1) < date$$1 ? formatMonth : formatYear)(date$$1);\n  }\n\n  function tickInterval(interval, start, stop, step) {\n    if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval\n    // based on the extent of the domain and a rough estimate of tick size.\n    // Otherwise, assume interval is already a time interval and use it.\n\n    if (typeof interval === \"number\") {\n      var target = Math.abs(stop - start) / interval,\n          i = bisector(function (i) {\n        return i[2];\n      }).right(tickIntervals, target);\n\n      if (i === tickIntervals.length) {\n        step = tickStep(start / durationYear, stop / durationYear, interval);\n        interval = year$$1;\n      } else if (i) {\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n        step = i[1];\n        interval = i[0];\n      } else {\n        step = Math.max(tickStep(start, stop, interval), 1);\n        interval = millisecond$$1;\n      }\n    }\n\n    return step == null ? interval : interval.every(step);\n  }\n\n  scale.invert = function (y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function (_) {\n    return arguments.length ? domain(map$2.call(_, number$3)) : domain().map(date$1);\n  };\n\n  scale.ticks = function (interval, step) {\n    var d = domain(),\n        t0 = d[0],\n        t1 = d[d.length - 1],\n        r = t1 < t0,\n        t;\n    if (r) t = t0, t0 = t1, t1 = t;\n    t = tickInterval(interval, t0, t1, step);\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n\n    return r ? t.reverse() : t;\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function (interval, step) {\n    var d = domain();\n    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice(d, interval)) : scale;\n  };\n\n  scale.copy = function () {\n    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));\n  };\n\n  return scale;\n}\n\nfunction scaleTime() {\n  return calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\n}\n\nfunction scaleUtc() {\n  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\n}\n\nvar _scales;\n\nvar scales = (_scales = {}, defineProperty(_scales, axisTypeLinear, linear$1), defineProperty(_scales, axisTypeLog, log), defineProperty(_scales, axisTypeTime, scaleTime), defineProperty(_scales, axisTypeUtc, scaleUtc), defineProperty(_scales, axisTypeOrdinal, band), _scales);\n\nvar detectVertical = function detectVertical(d) {\n  return [positionLeft, positionRight].indexOf(d) > -1;\n};\n\nvar detectRTL = function detectRTL(d) {\n  return [positionTop, positionRight].indexOf(d) > -1;\n};\n\nfunction buildAxisLinear(_ref) {\n  var _scale, _scale2;\n\n  var _ref$axis = _ref.axis,\n      primary = _ref$axis.primary,\n      type = _ref$axis.type,\n      invert = _ref$axis.invert,\n      position = _ref$axis.position,\n      primaryAxisID = _ref$axis.primaryAxisID,\n      _ref$axis$min = _ref$axis.min,\n      userMin = _ref$axis$min === undefined ? undefined : _ref$axis$min,\n      _ref$axis$max = _ref$axis.max,\n      userMax = _ref$axis$max === undefined ? undefined : _ref$axis$max,\n      _ref$axis$hardMin = _ref$axis.hardMin,\n      hardMin = _ref$axis$hardMin === undefined ? undefined : _ref$axis$hardMin,\n      _ref$axis$hardMax = _ref$axis.hardMax,\n      hardMax = _ref$axis$hardMax === undefined ? undefined : _ref$axis$hardMax,\n      _ref$axis$base = _ref$axis.base,\n      base = _ref$axis$base === undefined ? undefined : _ref$axis$base,\n      _ref$axis$tickArgumen = _ref$axis.tickArguments,\n      tickArguments = _ref$axis$tickArgumen === undefined ? [] : _ref$axis$tickArgumen,\n      _ref$axis$tickValues = _ref$axis.tickValues,\n      tickValues = _ref$axis$tickValues === undefined ? null : _ref$axis$tickValues,\n      _ref$axis$tickFormat = _ref$axis.tickFormat,\n      tickFormat = _ref$axis$tickFormat === undefined ? null : _ref$axis$tickFormat,\n      _ref$axis$tickSizeInn = _ref$axis.tickSizeInner,\n      tickSizeInner = _ref$axis$tickSizeInn === undefined ? 6 : _ref$axis$tickSizeInn,\n      _ref$axis$tickSizeOut = _ref$axis.tickSizeOuter,\n      tickSizeOuter = _ref$axis$tickSizeOut === undefined ? 6 : _ref$axis$tickSizeOut,\n      _ref$axis$tickPadding = _ref$axis.tickPadding,\n      tickPadding = _ref$axis$tickPadding === undefined ? 3 : _ref$axis$tickPadding,\n      _ref$axis$maxLabelRot = _ref$axis.maxLabelRotation,\n      maxLabelRotation = _ref$axis$maxLabelRot === undefined ? 50 : _ref$axis$maxLabelRot,\n      _ref$axis$innerPaddin = _ref$axis.innerPadding,\n      innerPadding = _ref$axis$innerPaddin === undefined ? 0.2 : _ref$axis$innerPaddin,\n      _ref$axis$outerPaddin = _ref$axis.outerPadding,\n      outerPadding = _ref$axis$outerPaddin === undefined ? 0.1 : _ref$axis$outerPaddin,\n      _ref$axis$showGrid = _ref$axis.showGrid,\n      showGrid = _ref$axis$showGrid === undefined ? null : _ref$axis$showGrid,\n      _ref$axis$showTicks = _ref$axis.showTicks,\n      showTicks = _ref$axis$showTicks === undefined ? true : _ref$axis$showTicks,\n      _ref$axis$show = _ref$axis.show,\n      show = _ref$axis$show === undefined ? true : _ref$axis$show,\n      _ref$axis$stacked = _ref$axis.stacked,\n      stacked = _ref$axis$stacked === undefined ? false : _ref$axis$stacked,\n      userID = _ref$axis.id,\n      primaryAxes = _ref.primaryAxes,\n      materializedData = _ref.materializedData,\n      gridHeight = _ref.gridHeight,\n      gridWidth = _ref.gridWidth;\n\n  if (!position) {\n    throw new Error('Chart axes must have a valid \\'position\\' property');\n  } // Detect some settings\n\n\n  var valueKey = primary ? 'primary' : 'secondary';\n  var groupKey = !primary && 'primary';\n  var AxisIDKey = valueKey + 'AxisID';\n  var vertical = detectVertical(position);\n  var RTL = detectRTL(position); // Right to left OR top to bottom\n\n  var id = userID || position + '_' + type; // TODO: Any sorting needs to happen here, else the min/max's might not line up correctly\n  // First we need to find unique values, min/max values and negative/positive totals\n\n  var uniqueVals = [];\n  var min = void 0;\n  var max = void 0;\n  var negativeTotalByKey = {};\n  var positiveTotalByKey = {};\n  var domain = void 0; // Loop through each series\n\n  for (var seriesIndex = 0; seriesIndex < materializedData.length; seriesIndex++) {\n    if (materializedData[seriesIndex][AxisIDKey] && materializedData[seriesIndex][AxisIDKey] !== id) {\n      continue;\n    } // Loop through each datum\n\n\n    for (var datumIndex = 0; datumIndex < materializedData[seriesIndex].datums.length; datumIndex++) {\n      var datum = materializedData[seriesIndex].datums[datumIndex];\n      var value = void 0;\n      var key = groupKey ? datum[groupKey] : datumIndex; // For ordinal scales, unique the values\n\n      if (type === axisTypeOrdinal) {\n        if (uniqueVals.indexOf() === -1) {\n          uniqueVals.push(materializedData[seriesIndex].datums[datumIndex][valueKey]);\n        }\n      } else if (type === axisTypeTime || type === axisTypeUtc) {\n        value = +datum[valueKey];\n      } else {\n        value = datum[valueKey];\n      } // Add to stack total\n\n\n      if (stacked) {\n        if (value > 0) {\n          positiveTotalByKey[key] = typeof positiveTotalByKey[key] !== 'undefined' ? positiveTotalByKey[key] + value : value;\n        } else {\n          negativeTotalByKey[key] = typeof negativeTotalByKey[key] !== 'undefined' ? negativeTotalByKey[key] + value : value;\n        }\n      } else {\n        // Find min/max\n        min = typeof min !== 'undefined' ? Math.min(min, value) : value;\n        max = typeof max !== 'undefined' ? Math.max(max, value) : value;\n      }\n    }\n  }\n\n  if (type === axisTypeOrdinal) {\n    domain = uniqueVals;\n  } else if (stacked) {\n    domain = [Math.min.apply(Math, [0].concat(toConsumableArray(Object.values(negativeTotalByKey)))), Math.max.apply(Math, [0].concat(toConsumableArray(Object.values(positiveTotalByKey))))];\n  } else {\n    domain = [min, max];\n  } // Now we need to figure out the range\n\n\n  var range = vertical ? [gridHeight, 0] // If the axis is inverted, swap the range, too\n  : [0, gridWidth];\n\n  if (!primary) {\n    var primaryAxis = primaryAxes.find(function (d) {\n      return d.id === primaryAxisID;\n    }) || primaryAxes[0]; // Secondary axes are usually dependent on primary axes for orientation, so if the\n    // primaryAxis is in RTL mode, we need to reverse the range on this secondary axis\n    // to match the origin of the primary axis\n\n    if (primaryAxis.RTL) {\n      range = [].concat(toConsumableArray(range)).reverse();\n    }\n  } // Give the scale a home\n\n\n  var scale = void 0; // If this is an ordinal or other primary axis, it needs to be able to display bars.\n\n  var bandScale = void 0;\n  var barSize = 0;\n  var cursorSize = 0;\n  var stepSize = 0;\n\n  var seriesBandScale = function seriesBandScale(d) {\n    return d;\n  };\n\n  var seriesBarSize = 1;\n\n  if (type === axisTypeOrdinal || primary) {\n    // Calculate a band axis that is similar and pass down the bandwidth\n    // just in case.\n    bandScale = band().domain(materializedData.reduce(function (prev, current) {\n      return current.datums.length > prev.length ? current.datums : prev;\n    }, []).map(function (d) {\n      return d.primary;\n    })).rangeRound(range, 0.1).padding(0);\n    bandScale.paddingOuter(outerPadding).paddingInner(innerPadding);\n    barSize = bandScale.bandwidth();\n\n    if (type === axisTypeOrdinal) {\n      cursorSize = barSize;\n    } // barSize = bandScale.bandwidth()\n\n\n    stepSize = bandScale.step(); // Create a seriesBandScale in case this axis isn't stacked\n\n    seriesBandScale = band().paddingInner(innerPadding / 2).domain(materializedData.filter(function (d) {\n      return d.Component === Bar$1;\n    }).map(function (d, i) {\n      return i;\n    })).rangeRound([0, barSize]);\n    seriesBarSize = seriesBandScale.bandwidth();\n  }\n\n  if (type === axisTypeOrdinal) {\n    // If it's ordinal, just assign the bandScale we made\n    scale = bandScale;\n  } else {\n    // Otherwise, create a new scale of the appropriate type\n    scale = scales[type]();\n  } // Set base, min, and max\n\n\n  if (typeof base === 'number') {\n    domain[0] = Math.min(domain[0], base);\n    domain[1] = Math.max(domain[1], base);\n  }\n\n  if (typeof defaultMin === 'number') {\n    domain[0] = Math.min(domain[0], userMin);\n  }\n\n  if (typeof defaultMax === 'number') {\n    domain[1] = Math.max(domain[1], userMax);\n  } // Set the domain\n\n\n  scale.domain(domain); // If we're not using an ordinal scale, round the ticks to \"nice\" values\n\n  if (type !== axisTypeOrdinal) {\n    scale.nice();\n  } // If hard min and max are set, override any \"nice\" rounding values\n\n\n  if (typeof hardMin === 'number') {\n    scale.domain([hardMin, scale.domain()[1]]);\n  }\n\n  if (typeof hardMax === 'number') {\n    scale.domain([scale.domain()[0], hardMax]);\n  } // Invert if necessary\n\n\n  if (invert) {\n    scale.domain([].concat(toConsumableArray(scale.domain())).reverse());\n  } // Now set the range\n\n\n  scale.range(range); // Pass down the axis config (including the scale itself) for posterity\n\n  var axis = {\n    id: id,\n    primary: primary,\n    type: type,\n    invert: invert,\n    position: position,\n    primaryAxisID: primaryAxisID,\n    hardMin: hardMin,\n    hardMax: hardMax,\n    base: base,\n    tickArguments: tickArguments,\n    tickValues: tickValues,\n    tickFormat: tickFormat,\n    tickSizeInner: tickSizeInner,\n    tickSizeOuter: tickSizeOuter,\n    tickPadding: tickPadding,\n    maxLabelRotation: maxLabelRotation,\n    innerPadding: innerPadding,\n    outerPadding: outerPadding,\n    showGrid: showGrid,\n    showTicks: showTicks,\n    show: show,\n    stacked: stacked,\n    scale: scale,\n    uniqueVals: uniqueVals,\n    vertical: vertical,\n    RTL: RTL,\n    barSize: barSize,\n    cursorSize: cursorSize,\n    stepSize: stepSize,\n    seriesBandScale: seriesBandScale,\n    seriesBarSize: seriesBarSize,\n    domain: domain,\n    range: range,\n    max: position === positionBottom ? -gridHeight : position === positionLeft ? gridWidth : position === positionTop ? gridHeight : -gridWidth,\n    directionMultiplier: position === positionTop || position === positionLeft ? -1 : 1,\n    transform: !vertical ? Utils$1.translateX : Utils$1.translateY,\n    ticks: !tickValues ? scale.ticks ? (_scale = scale).ticks.apply(_scale, toConsumableArray(tickArguments)) : scale.domain() : tickValues,\n    format: !tickFormat ? scale.tickFormat ? (_scale2 = scale).tickFormat.apply(_scale2, toConsumableArray(tickArguments)) : Utils$1.identity : tickFormat,\n    spacing: Math.max(tickSizeInner, 0) + tickPadding\n  };\n\n  if (type === axisTypeOrdinal) {\n    axis.gridOffset = -(axis.stepSize * innerPadding) / 2;\n    axis.tickOffset = axis.barSize / 2;\n    axis.barOffset = 0;\n  } else {\n    axis.tickOffset = 0;\n    axis.barOffset = -axis.barSize / 2;\n  }\n\n  return axis;\n} // import buildAxisPie from './buildAxis.pie'\n\n\nfunction buildAxis(config) {\n  // if (config.type === 'pie') {\n  // return buildAxisPie(config)\n  // }\n  return buildAxisLinear(config);\n}\n\nvar axisShape = PropTypes.shape({\n  primary: PropTypes.bool,\n  type: PropTypes.oneOf([axisTypeOrdinal, axisTypeTime, axisTypeUtc, axisTypeLinear, axisTypeLog]).isRequired,\n  invert: PropTypes.bool,\n  position: PropTypes.oneOf([positionTop, positionRight, positionBottom, positionLeft]),\n  primaryAxisID: PropTypes.any,\n  min: PropTypes.any,\n  max: PropTypes.any,\n  hardMin: PropTypes.any,\n  hardMax: PropTypes.any,\n  base: PropTypes.any,\n  tickArguments: PropTypes.any,\n  tickValues: PropTypes.any,\n  tickFormat: PropTypes.func,\n  tickSizeInner: PropTypes.number,\n  tickSizeOuter: PropTypes.number,\n  tickPadding: PropTypes.number,\n  maxLabelRotation: PropTypes.number,\n  innerPadding: PropTypes.number,\n  outerPadding: PropTypes.number,\n  showGrid: PropTypes.bool,\n  showTicks: PropTypes.bool,\n  show: PropTypes.bool,\n  stacked: PropTypes.bool,\n  id: PropTypes.any\n});\n\nvar calculateAxes = function calculateAxes(_ref) {\n  var axes = _ref.axes,\n      materializedData = _ref.materializedData,\n      gridHeight = _ref.gridHeight,\n      gridWidth = _ref.gridWidth; // Detect axes changes and build axes\n\n  var prePrimaryAxes = axes.filter(function (d) {\n    return d.primary;\n  });\n  var preSecondaryAxes = axes.filter(function (d) {\n    return !d.primary;\n  });\n  var primaryAxesHashes = JSON.stringify(prePrimaryAxes);\n  var secondaryAxesHashes = JSON.stringify(preSecondaryAxes); // Calculate primary axes\n\n  var primaryAxes = useMemo(function () {\n    return prePrimaryAxes.map(function (axis, i) {\n      return buildAxis({\n        axis: axis,\n        materializedData: materializedData,\n        gridWidth: gridWidth,\n        gridHeight: gridHeight\n      });\n    });\n  }, [primaryAxesHashes, materializedData, gridHeight, gridWidth]); // Calculate secondary axes\n\n  var secondaryAxes = useMemo(function () {\n    return preSecondaryAxes.map(function (axis, i) {\n      return buildAxis({\n        axis: axis,\n        primaryAxes: primaryAxes,\n        materializedData: materializedData,\n        gridWidth: gridWidth,\n        gridHeight: gridHeight\n      });\n    });\n  }, [secondaryAxesHashes, materializedData, gridHeight, gridWidth]); // Make sure we're mapping x and y to the correct axes\n\n  var xKey = primaryAxes.find(function (d) {\n    return d.vertical;\n  }) ? 'secondary' : 'primary';\n  var yKey = primaryAxes.find(function (d) {\n    return d.vertical;\n  }) ? 'primary' : 'secondary';\n  var xAxes = primaryAxes.find(function (d) {\n    return d.vertical;\n  }) ? secondaryAxes : primaryAxes;\n  var yAxes = primaryAxes.find(function (d) {\n    return d.vertical;\n  }) ? primaryAxes : secondaryAxes;\n  return {\n    primaryAxes: primaryAxes,\n    secondaryAxes: secondaryAxes,\n    xKey: xKey,\n    yKey: yKey,\n    xAxes: xAxes,\n    yAxes: yAxes\n  };\n};\n\nvar defaultColors = ['#4ab5eb', '#fc6868', '#DECF3F', '#60BD68', '#FAA43A', '#c63b89', '#1aaabe', '#734fe9', '#1828bd', '#cd82ad'];\n\nvar calculateStackData = function calculateStackData(_ref) {\n  var materializedData = _ref.materializedData,\n      primaryAxes = _ref.primaryAxes,\n      secondaryAxes = _ref.secondaryAxes,\n      yAxes = _ref.yAxes,\n      yKey = _ref.yKey,\n      xAxes = _ref.xAxes,\n      xKey = _ref.xKey,\n      groupMode = _ref.groupMode; // Make stackData\n\n  return useMemo(function () {\n    // We need materializedData and both axes to continue\n    if (!primaryAxes.length || !secondaryAxes.length) {\n      throw new Error('A primary and secondary axis is required!');\n    } // If the axes are ready, let's decorate the materializedData for visual plotting\n    // \"totals\" are kept per secondaryAxis and used for bases if secondaryAxis stacking is enabled\n\n\n    var scaleTotals = secondaryAxes.map(function () {\n      return {};\n    });\n    materializedData.forEach(function (series) {\n      var axisIndex = Utils$1.getAxisIndexByAxisID(secondaryAxes, series.secondaryAxisID);\n      series.datums.forEach(function (datum) {\n        scaleTotals[axisIndex][datum.primary] = {\n          negative: 0,\n          positive: 0\n        };\n      });\n    }); // Determine the correct primary and secondary values for each axis\n    // Also calculate bases and totals if either axis is stacked\n\n    var stackData = materializedData.map(function (series) {\n      var primaryAxisIndex = Utils$1.getAxisIndexByAxisID(primaryAxes, series.primaryAxisID);\n      var primaryAxis = primaryAxes[primaryAxisIndex];\n      var secondaryAxisIndex = Utils$1.getAxisIndexByAxisID(secondaryAxes, series.secondaryAxisID);\n      var secondaryAxis = secondaryAxes[secondaryAxisIndex];\n      return _extends({}, series, {\n        datums: series.datums.map(function (d) {\n          var datum = _extends({}, d, {\n            xValue: d[xKey],\n            yValue: d[yKey],\n            baseValue: 0\n          });\n\n          if (secondaryAxis.stacked) {\n            var start = scaleTotals[secondaryAxisIndex][d.primary]; // Stack the x or y values (according to axis positioning)\n\n            if (primaryAxis.vertical) {\n              // Is this a valid point?\n              var validPoint = Utils$1.isValidPoint(datum.xValue); // Should we use positive or negative base?\n\n              var totalKey = datum.xValue >= 0 ? 'positive' : 'negative'; // Assign the base\n\n              datum.baseValue = start[totalKey]; // Add the value for a total\n\n              datum.totalValue = datum.baseValue + (validPoint ? datum.xValue : 0); // Update the totals\n\n              scaleTotals[secondaryAxisIndex][d.primary][totalKey] = datum.totalValue; // Make the total the new value\n\n              datum.xValue = validPoint ? datum.totalValue : null;\n            } else {\n              // Is this a valid point?\n              var _validPoint = Utils$1.isValidPoint(datum.yValue); // Should we use positive or negative base?\n\n\n              var _totalKey = datum.yValue >= 0 ? 'positive' : 'negative'; // Assign the base\n\n\n              datum.baseValue = start[_totalKey]; // Add the value to the base\n\n              datum.totalValue = datum.baseValue + (_validPoint ? datum.yValue : 0); // Update the totals\n\n              scaleTotals[secondaryAxisIndex][d.primary][_totalKey] = datum.totalValue; // Make the total the new value\n\n              datum.yValue = _validPoint ? datum.totalValue : null;\n            }\n          }\n\n          return datum;\n        })\n      });\n    });\n    stackData.forEach(function (series) {\n      series.datums.forEach(function (datum) {\n        datum.series = series;\n      });\n    }); // Use the plotDatum method on each series\n\n    stackData.forEach(function (series, i) {\n      if (!series.Component.plotDatum) {\n        throw new Error('Could not find a [SeriesType].plotDatum() static method for the series Component above (index: ' + i + ')');\n      }\n\n      var primaryAxisIndex = Utils$1.getAxisIndexByAxisID(primaryAxes, series.primaryAxisID);\n      var secondaryAxisIndex = Utils$1.getAxisIndexByAxisID(secondaryAxes, series.secondaryAxisID);\n      var primaryAxis = primaryAxes[primaryAxisIndex];\n      var secondaryAxis = secondaryAxes[secondaryAxisIndex];\n      var xAxisIndex = Utils$1.getAxisIndexByAxisID(xAxes, series[xKey + 'AxisID']);\n      var yAxisIndex = Utils$1.getAxisIndexByAxisID(yAxes, series[yKey + 'AxisID']);\n      var xAxis = xAxes[xAxisIndex];\n      var yAxis = yAxes[yAxisIndex];\n      series.datums = series.datums.map(function (d) {\n        // Data for cartesian charts\n        var result = series.Component.plotDatum(d, {\n          primaryAxis: primaryAxis,\n          secondaryAxis: secondaryAxis,\n          xAxis: xAxis,\n          yAxis: yAxis\n        });\n        return result || d;\n      });\n    }); // Do any data grouping ahead of time using\n\n    if ([groupModeSingle, groupModeSeries].includes(groupMode)) {\n      for (var seriesIndex = 0; seriesIndex < stackData.length; seriesIndex++) {\n        var series = stackData[seriesIndex];\n\n        for (var datumIndex = 0; datumIndex < series.datums.length; datumIndex++) {\n          var datum = series.datums[datumIndex];\n          datum.group = groupMode === groupModeSeries ? datum.series.datums : [datum];\n        }\n      }\n    } else if ([groupModePrimary, groupModeSecondary].includes(groupMode)) {\n      var datumsByGrouping = {};\n\n      for (var _seriesIndex = 0; _seriesIndex < stackData.length; _seriesIndex++) {\n        var _series = stackData[_seriesIndex];\n\n        for (var _datumIndex = 0; _datumIndex < _series.datums.length; _datumIndex++) {\n          var _datum = _series.datums[_datumIndex];\n\n          if (!_datum.defined) {\n            continue;\n          }\n\n          var axisKey = String(groupMode === groupModePrimary ? _datum.primary : _datum.secondary);\n          datumsByGrouping[axisKey] = datumsByGrouping[axisKey] || [];\n          datumsByGrouping[axisKey].push(_datum);\n        }\n      }\n\n      for (var _seriesIndex2 = 0; _seriesIndex2 < stackData.length; _seriesIndex2++) {\n        var _series2 = stackData[_seriesIndex2];\n\n        for (var _datumIndex2 = 0; _datumIndex2 < _series2.datums.length; _datumIndex2++) {\n          var _datum2 = _series2.datums[_datumIndex2];\n\n          var _axisKey = String(groupMode === groupModePrimary ? _datum2.primary : _datum2.secondary);\n\n          _datum2.group = datumsByGrouping[_axisKey];\n        }\n      }\n    } // Not we need to precalculate all of the possible status styles by\n    // calling the seemingly 'live' getSeriesStyle, and getDatumStyle callbacks ;)\n\n\n    stackData = stackData.map(function (series, i) {\n      if (!series.Component.buildStyles) {\n        throw new Error('Could not find a SeriesType.buildStyles() static method for the series Component above (index: ' + i + ')');\n      }\n\n      var result = series.Component.buildStyles(series, {\n        defaultColors: defaultColors\n      });\n      return result || series;\n    });\n    return stackData;\n  }, [primaryAxes, secondaryAxes, groupMode]);\n};\n\nvar showCount = 10;\n\nfunction TooltipRenderer(props) {\n  var datum = props.datum,\n      groupMode = props.groupMode,\n      primaryAxis = props.primaryAxis,\n      secondaryAxis = props.secondaryAxis,\n      formatSecondary = props.formatSecondary,\n      formatTertiary = props.formatTertiary,\n      getStyle = props.getStyle,\n      dark = props.dark;\n\n  if (!datum) {\n    return null;\n  }\n\n  var resolvedFormatSecondary = formatSecondary || function (val) {\n    return Math.floor(val) < val ? secondaryAxis.format(Math.round(val * 100) / 100) : secondaryAxis.format(val);\n  };\n\n  var resolvedFormatTertiary = formatTertiary || function (val) {\n    return Math.floor(val) < val ? Math.round(val * 100) / 100 : val;\n  };\n\n  var sortedGroupDatums = [].concat(toConsumableArray(datum.group)).sort(function (a, b) {\n    if (!primaryAxis.stacked && groupMode === groupModeSeries || groupMode === groupModeSecondary) {\n      if (a.primaryCoord > b.primaryCoord) {\n        return -1;\n      } else if (a.primaryCoord < b.primaryCoord) {\n        return 1;\n      }\n    } else if (!secondaryAxis.stacked) {\n      if (a.secondaryCoord > b.secondaryCoord) {\n        return -1;\n      } else if (a.secondaryCoord < b.secondaryCoord) {\n        return 1;\n      }\n    }\n\n    return a.seriesIndex > b.seriesIndex ? 1 : -1;\n  });\n\n  if (groupMode === groupModePrimary) {\n    sortedGroupDatums.reverse();\n  }\n\n  if (secondaryAxis.invert) {\n    sortedGroupDatums.reverse();\n  }\n\n  var resolvedShowCount = showCount;\n  var length = sortedGroupDatums.length; // Get the focused series' index\n\n  var activeIndex = sortedGroupDatums.findIndex(function (d) {\n    return d === datum;\n  }); // Get the start by going back half of the showCount\n\n  var start = activeIndex > -1 ? activeIndex - resolvedShowCount / 2 : 0; // Make sure it's at least 0\n\n  start = Math.max(start, 0); // Use the start and add the showCount to get the end\n\n  var end = activeIndex > -1 ? start + resolvedShowCount : length; // Don't let the end go passed the length\n\n  end = Math.min(end, length); // Double check we aren't clipping the start\n\n  start = Math.max(end - resolvedShowCount, 0); // Slice the datums by start and end\n\n  var visibleSortedGroupDatums = sortedGroupDatums.slice(start, end); // Detect if we have previous items\n\n  var hasPrevious = start > 0; // Or next items\n\n  var hasNext = end < length;\n  return React.createElement('div', null, React.createElement('div', {\n    style: {\n      marginBottom: '3px',\n      textAlign: 'center'\n    }\n  }, groupMode === groupModeSeries ? React.createElement('strong', null, datum.seriesLabel) : groupMode === groupModeSecondary ? React.createElement('strong', null, secondaryAxis.format(datum.secondary)) : React.createElement('strong', null, primaryAxis.format(datum.primary))), React.createElement('table', {\n    style: {\n      whiteSpace: 'nowrap'\n    }\n  }, React.createElement('tbody', null, hasPrevious ? React.createElement('tr', {\n    style: {\n      opacity: 0.8\n    }\n  }, React.createElement('td', null), React.createElement('td', null, '...'), React.createElement('td', null)) : null, visibleSortedGroupDatums.map(function (sortedDatum, i) {\n    var active = sortedDatum === datum;\n    return React.createElement('tr', {\n      key: i,\n      style: {\n        opacity: active ? 1 : 0.8,\n        fontWeight: active && 'bold'\n      }\n    }, React.createElement('td', {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginRight: '5px'\n      }\n    }, React.createElement('svg', {\n      width: '16',\n      height: '16'\n    }, React.createElement('circle', {\n      cx: '8',\n      cy: '8',\n      style: _extends({}, getStyle(sortedDatum), {\n        r: 7,\n        stroke: dark ? 'black' : 'white',\n        strokeWidth: active ? 2 : 1\n      })\n    }))), groupMode === groupModeSeries ? React.createElement(React.Fragment, null, React.createElement('td', null, primaryAxis.format(sortedDatum.primary), ': \\xA0'), React.createElement('td', {\n      style: {\n        textAlign: 'right'\n      }\n    }, resolvedFormatSecondary(sortedDatum.secondary), sortedDatum.r ? ' (' + resolvedFormatTertiary(sortedDatum.r) + ')' : null)) : groupMode === groupModeSecondary ? React.createElement(React.Fragment, null, React.createElement('td', null, sortedDatum.seriesLabel, ': \\xA0'), React.createElement('td', {\n      style: {\n        textAlign: 'right'\n      }\n    }, primaryAxis.format(sortedDatum.primary), sortedDatum.r ? ' (' + resolvedFormatTertiary(sortedDatum.r) + ')' : null)) : React.createElement(React.Fragment, null, React.createElement('td', null, sortedDatum.seriesLabel, ': \\xA0'), React.createElement('td', {\n      style: {\n        textAlign: 'right'\n      }\n    }, resolvedFormatSecondary(sortedDatum.secondary), sortedDatum.r ? ' (' + resolvedFormatTertiary(sortedDatum.r) + ')' : null)));\n  }), hasNext ? React.createElement('tr', {\n    style: {\n      opacity: 0.8\n    }\n  }, React.createElement('td', null), React.createElement('td', null, '...'), React.createElement('td', null)) : null, secondaryAxis && secondaryAxis.stacked && datum.group.length > 1 ? React.createElement('tr', null, React.createElement('td', {\n    style: {\n      paddingTop: '5px'\n    }\n  }, React.createElement('div', {\n    style: {\n      width: '12px',\n      height: '12px',\n      backgroundColor: dark ? 'rgba(0, 26, 39, 0.3)' : 'rgba(255,255,255,.2)',\n      borderRadius: '50px'\n    }\n  })), React.createElement('td', {\n    style: {\n      paddingTop: '5px'\n    }\n  }, 'Total: \\xA0'), React.createElement('td', {\n    style: {\n      paddingTop: '5px'\n    }\n  }, resolvedFormatSecondary([].concat(toConsumableArray(datum.group)).reverse()[0].totalValue))) : null)));\n}\n\nvar alignPropType = PropTypes.oneOf([alignAuto, alignRight, alignTopRight, alignBottomRight, alignLeft, alignTopLeft, alignBottomLeft, alignTop, alignBottom]);\nvar tooltipShape = PropTypes.oneOfType([PropTypes.oneOf([true]), PropTypes.shape({\n  align: alignPropType,\n  alignPriority: PropTypes.arrayOf(alignPropType),\n  padding: PropTypes.number,\n  tooltipArrowPadding: PropTypes.number,\n  anchor: PropTypes.oneOf([anchorPointer, anchorClosest, anchorCenter, anchorTop, anchorBottom, anchorLeft, anchorRight, anchorGridTop, anchorGridBottom, anchorGridLeft, anchorGridRight]),\n  render: PropTypes.func.required,\n  onChange: PropTypes.func\n})]);\n\nvar calculateTooltip = function calculateTooltip(_ref) {\n  var focused = _ref.focused,\n      tooltip = _ref.tooltip,\n      pointer = _ref.pointer,\n      gridWidth = _ref.gridWidth,\n      gridHeight = _ref.gridHeight;\n\n  if (!tooltip) {\n    return null;\n  } // Default tooltip props\n\n\n  tooltip = _extends({\n    align: alignAuto,\n    alignPriority: [alignRight, alignTopRight, alignBottomRight, alignLeft, alignTopLeft, alignBottomLeft, alignTop, alignBottom],\n    padding: 5,\n    tooltipArrowPadding: 7,\n    anchor: 'closest',\n    render: TooltipRenderer,\n    onChange: function onChange() {}\n  }, tooltip);\n  return useMemo(function () {\n    var anchor = {};\n    var show = true; // If there is a focused datum, default the focus to its x and y\n\n    if (focused) {\n      anchor = focused.anchor;\n    } else {\n      show = false;\n    }\n\n    if (tooltip.anchor === 'pointer') {\n      // Support pointer-bound focus\n      anchor = pointer;\n    } else if (tooltip.anchor === 'closest') ;else if (focused) {\n      // Support manual definition of focus point using relative multiFocus strategy\n      var multiFocus = Array.isArray(tooltip.anchor) ? [].concat(toConsumableArray(tooltip.anchor)) : [tooltip.anchor];\n      anchor = Utils.getMultiAnchor({\n        anchor: multiFocus,\n        points: focused.group,\n        gridWidth: gridWidth,\n        gridHeight: gridHeight\n      });\n    }\n\n    anchor = anchor ? _extends({\n      horizontalPadding: anchor.horizontalPadding || 0,\n      verticalPadding: anchor.verticalPadding || 0\n    }, anchor) : anchor;\n    return _extends({}, tooltip, {\n      anchor: anchor,\n      show: show\n    });\n  }, [pointer, tooltip]);\n};\n\nvar cursorShape = PropTypes.oneOfType([PropTypes.oneOf([true]), PropTypes.shape({\n  render: PropTypes.func,\n  snap: PropTypes.bool,\n  showLine: PropTypes.bool,\n  showLabel: PropTypes.bool,\n  axisID: PropTypes.any,\n  onChange: PropTypes.func\n})]);\nvar defaultCursorProps = {\n  render: function render(_ref) {\n    var formattedValue = _ref.formattedValue;\n    return React.createElement('span', null, formattedValue);\n  },\n  snap: true,\n  showLine: true,\n  showLabel: true,\n  axisID: undefined,\n  onChange: function onChange() {}\n};\n\nvar calculateCursors = function calculateCursors(_ref2) {\n  var primaryCursor = _ref2.primaryCursor,\n      secondaryCursor = _ref2.secondaryCursor,\n      primaryAxes = _ref2.primaryAxes,\n      secondaryAxes = _ref2.secondaryAxes,\n      focused = _ref2.focused,\n      pointer = _ref2.pointer,\n      gridWidth = _ref2.gridWidth,\n      gridHeight = _ref2.gridHeight,\n      stackData = _ref2.stackData;\n  return [primaryCursor, secondaryCursor].map(function (cursor, i) {\n    return useMemo(function () {\n      if (!cursor) {\n        return;\n      }\n\n      var primary = i === 0;\n      cursor = _extends({}, defaultCursorProps, cursor, {\n        primary: primary\n      });\n      var value = void 0;\n      var show = false; // Determine the axis to use\n\n      var axis = Utils$1.getAxisByAxisID(primary ? primaryAxes : secondaryAxes, cursor.axisID || focused ? focused.series[primary ? 'primaryAxisID' : 'secondaryAxisID'] : undefined);\n      var siblingAxis = primary ? secondaryAxes[0] : primaryAxes[0]; // Resolve the invert function\n\n      var invert = axis.scale.invert || function (d) {\n        return d;\n      }; // If the pointer is active, try to show\n\n\n      if (pointer.active) {\n        // Default to cursor x and y\n        var x = pointer.x;\n        var y = pointer.y; // If the cursor isn't in the grid, don't display\n\n        if (x < -1 || x > gridWidth + 1 || y < -1 || y > gridHeight + 1) {\n          show = false;\n        } else {\n          show = true;\n        } // Implement snapping\n\n\n        if (axis.type === 'ordinal' || cursor.snap) {\n          if (!focused) {\n            show = false;\n          } else {\n            if (axis.vertical) {\n              value = focused.yValue;\n            } else {\n              value = focused.xValue;\n            }\n          }\n        } else if (axis.vertical) {\n          value = invert(y);\n        } else {\n          value = invert(x);\n        }\n      } else {\n        show = false;\n      }\n\n      var resolvedShow = show;\n      var resolvedValue = value;\n\n      if (typeof cursor.value !== 'undefined' && cursor.value !== null) {\n        resolvedValue = cursor.value;\n\n        if (typeof cursor.show !== 'undefined') {\n          resolvedShow = cursor.show;\n        } else {\n          resolvedShow = true;\n        }\n\n        if (typeof axis.scale(resolvedValue) === 'undefined') {\n          resolvedShow = false;\n        }\n      }\n\n      return _extends({}, cursor, {\n        axis: axis,\n        siblingAxis: siblingAxis,\n        show: show,\n        value: value,\n        resolvedShow: resolvedShow,\n        resolvedValue: resolvedValue\n      });\n    }, [stackData, pointer, cursor && cursor.value]);\n  });\n};\n\nfunction Chart(_ref, ref) {\n  var data = _ref.data,\n      groupMode = _ref.groupMode,\n      showVoronoi = _ref.showVoronoi,\n      dark = _ref.dark,\n      series = _ref.series,\n      axes = _ref.axes,\n      primaryCursor = _ref.primaryCursor,\n      secondaryCursor = _ref.secondaryCursor,\n      tooltip = _ref.tooltip,\n      brush = _ref.brush,\n      renderSVG = _ref.renderSVG,\n      getSeries = _ref.getSeries,\n      getDatums = _ref.getDatums,\n      getLabel = _ref.getLabel,\n      getSeriesID = _ref.getSeriesID,\n      getPrimary = _ref.getPrimary,\n      getSecondary = _ref.getSecondary,\n      getR = _ref.getR,\n      getPrimaryAxisID = _ref.getPrimaryAxisID,\n      getSecondaryAxisID = _ref.getSecondaryAxisID,\n      getSeriesStyle = _ref.getSeriesStyle,\n      getDatumStyle = _ref.getDatumStyle,\n      onClick = _ref.onClick,\n      onFocus = _ref.onFocus,\n      onHover = _ref.onHover,\n      getSeriesOrder = _ref.getSeriesOrder,\n      rest = objectWithoutProperties(_ref, ['data', 'groupMode', 'showVoronoi', 'dark', 'series', 'axes', 'primaryCursor', 'secondaryCursor', 'tooltip', 'brush', 'renderSVG', 'getSeries', 'getDatums', 'getLabel', 'getSeriesID', 'getPrimary', 'getSecondary', 'getR', 'getPrimaryAxisID', 'getSecondaryAxisID', 'getSeriesStyle', 'getDatumStyle', 'onClick', 'onFocus', 'onHover', 'getSeriesOrder']);\n\n  var _useState = useState({\n    focused: null,\n    axisDimensions: {},\n    padding: {},\n    offset: {},\n    pointer: {}\n  }),\n      _useState2 = slicedToArray(_useState, 2),\n      _useState2$ = _useState2[0],\n      focused = _useState2$.focused,\n      axisDimensions = _useState2$.axisDimensions,\n      offsetState = _useState2$.offset,\n      padding = _useState2$.padding,\n      pointer = _useState2$.pointer,\n      setChartState = _useState2[1];\n\n  var _useHyperResponsive = useHyperResponsive(),\n      _useHyperResponsive2 = slicedToArray(_useHyperResponsive, 2),\n      _useHyperResponsive2$ = _useHyperResponsive2[0],\n      width = _useHyperResponsive2$.width,\n      height = _useHyperResponsive2$.height,\n      handleRef = _useHyperResponsive2[1];\n\n  var materializedData = calculateMaterializeData({\n    getSeries: getSeries,\n    data: data,\n    getSeriesID: getSeriesID,\n    getLabel: getLabel,\n    getPrimaryAxisID: getPrimaryAxisID,\n    getSecondaryAxisID: getSecondaryAxisID,\n    getDatums: getDatums,\n    getPrimary: getPrimary,\n    getSecondary: getSecondary,\n    getR: getR\n  });\n  var seriesOptions = calculateSeriesOptions({\n    materializedData: materializedData,\n    series: series\n  });\n  materializedData = calculateSeriesTypes({\n    materializedData: materializedData,\n    seriesOptions: seriesOptions\n  });\n\n  var _calculateDimensions = calculateDimensions({\n    width: width,\n    height: height,\n    axisDimensions: axisDimensions,\n    padding: padding,\n    offset: offsetState\n  }),\n      offset = _calculateDimensions.offset,\n      gridX = _calculateDimensions.gridX,\n      gridY = _calculateDimensions.gridY,\n      gridWidth = _calculateDimensions.gridWidth,\n      gridHeight = _calculateDimensions.gridHeight;\n\n  var _calculateAxes = calculateAxes({\n    axes: axes,\n    materializedData: materializedData,\n    gridHeight: gridHeight,\n    gridWidth: gridWidth\n  }),\n      primaryAxes = _calculateAxes.primaryAxes,\n      secondaryAxes = _calculateAxes.secondaryAxes,\n      xKey = _calculateAxes.xKey,\n      yKey = _calculateAxes.yKey,\n      xAxes = _calculateAxes.xAxes,\n      yAxes = _calculateAxes.yAxes;\n\n  var stackData = calculateStackData({\n    materializedData: materializedData,\n    primaryAxes: primaryAxes,\n    secondaryAxes: secondaryAxes,\n    yAxes: yAxes,\n    yKey: yKey,\n    xAxes: xAxes,\n    xKey: xKey,\n    groupMode: groupMode\n  });\n  pointer = useMemo(function () {\n    return _extends({}, pointer, {\n      axisValues: [].concat(toConsumableArray(primaryAxes), toConsumableArray(secondaryAxes)).map(function (axis) {\n        return {\n          axis: axis,\n          value: axis.scale.invert ? axis.scale.invert(pointer[axis.vertical ? 'y' : 'x']) : null\n        };\n      })\n    });\n  }, [pointer]);\n  focused = useMemo(function () {\n    // Get the closest focus datum out of the datum group\n    return focused ? Utils$1.getClosestPoint(pointer, focused.group) : null;\n  }, [focused, pointer]); // keep the previous focused value around for animations\n\n  var lastFocused = useWhen(focused, focused); // Calculate Tooltip\n\n  tooltip = calculateTooltip({\n    focused: focused,\n    tooltip: tooltip,\n    pointer: pointer,\n    gridWidth: gridWidth,\n    gridHeight: gridHeight\n  }) // Cursors\n  ;\n\n  var _calculateCursors = calculateCursors({\n    primaryCursor: primaryCursor,\n    secondaryCursor: secondaryCursor,\n    primaryAxes: primaryAxes,\n    secondaryAxes: secondaryAxes,\n    focused: focused,\n    pointer: pointer,\n    gridWidth: gridWidth,\n    gridHeight: gridHeight,\n    stackData: stackData\n  });\n\n  var _calculateCursors2 = slicedToArray(_calculateCursors, 2);\n\n  primaryCursor = _calculateCursors2[0];\n  secondaryCursor = _calculateCursors2[1];\n  var originalOnClick = onClick;\n\n  onClick = function onClick(e) {\n    if (!originalOnClick) {\n      return;\n    }\n\n    e && e.persist && e.persist();\n    originalOnClick(focused, e);\n  };\n\n  useEffect(function () {\n    if (onFocus) {\n      onFocus(focused);\n    }\n  }, [focused]);\n  useEffect(function () {\n    if (onHover) {\n      onHover(pointer);\n    }\n  }, [pointer]);\n  useEffect(function () {\n    if (brush && pointer.released) {\n      if (Math.abs(pointer.sourceX - pointer.x) < 20) {\n        return;\n      }\n\n      brush.onSelect({\n        pointer: pointer.released,\n        start: primaryAxes[0].scale.invert(pointer.sourceX),\n        end: primaryAxes[0].scale.invert(pointer.x)\n      });\n    }\n  }, [pointer.released]); // Decorate the chartState with computed values (or ones we just\n  // want to pass down through context)\n\n  var chartState = {\n    focused: focused,\n    lastFocused: lastFocused,\n    pointer: pointer,\n    tooltip: tooltip,\n    axisDimensions: axisDimensions,\n    offset: offset,\n    padding: padding,\n    width: width,\n    height: height,\n    brush: brush,\n    groupMode: groupMode,\n    showVoronoi: showVoronoi,\n    materializedData: materializedData,\n    stackData: stackData,\n    primaryAxes: primaryAxes,\n    secondaryAxes: secondaryAxes,\n    primaryCursor: primaryCursor,\n    secondaryCursor: secondaryCursor,\n    gridX: gridX,\n    gridY: gridY,\n    gridWidth: gridWidth,\n    gridHeight: gridHeight,\n    dark: dark,\n    renderSVG: renderSVG,\n    xKey: xKey,\n    yKey: yKey,\n    xAxes: xAxes,\n    yAxes: yAxes,\n    onClick: onClick,\n    getSeriesStyle: getSeriesStyle,\n    getDatumStyle: getDatumStyle,\n    seriesOptions: seriesOptions,\n    getSeriesOrder: getSeriesOrder\n  };\n  var chartStateContextValue = [chartState, setChartState];\n  return React.createElement(ChartContext.Provider, {\n    value: chartStateContextValue\n  }, React.createElement(ChartInner$1, _extends({\n    handleRef: handleRef\n  }, rest)));\n}\n\nChart.propTypes = {\n  data: PropTypes.any.isRequired,\n  groupMode: PropTypes.oneOf([groupModeSingle, groupModeSeries, groupModePrimary, groupModeSecondary]).isRequired,\n  showVoronoi: PropTypes.bool,\n  dark: PropTypes.bool,\n  series: seriesPropType,\n  axes: PropTypes.arrayOf(axisShape),\n  primaryCursor: cursorShape,\n  secondaryCursor: cursorShape,\n  tooltip: tooltipShape,\n  renderSVG: PropTypes.func,\n  getSeries: PropTypes.func.isRequired,\n  getDatums: PropTypes.func.isRequired,\n  getLabel: PropTypes.func.isRequired,\n  getSeriesID: PropTypes.func.isRequired,\n  getPrimary: PropTypes.func.isRequired,\n  getSecondary: PropTypes.func.isRequired,\n  getR: PropTypes.func.isRequired,\n  getPrimaryAxisID: PropTypes.func.isRequired,\n  getSecondaryAxisID: PropTypes.func.isRequired,\n  getSeriesOrder: PropTypes.func.isRequired,\n  getSeriesStyle: PropTypes.func,\n  getDatumStyle: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onHover: PropTypes.func\n};\nChart.defaultProps = {\n  getSeries: function getSeries(d) {\n    return d;\n  },\n  getDatums: function getDatums(d) {\n    return Array.isArray(d) ? d : d.datums || d.data;\n  },\n  getLabel: function getLabel(d, i) {\n    return d.label || 'Series ' + (i + 1);\n  },\n  getSeriesID: function getSeriesID(d, i) {\n    return i;\n  },\n  getPrimary: function getPrimary(d) {\n    return Array.isArray(d) ? d[0] : d.primary || d.x;\n  },\n  getSecondary: function getSecondary(d) {\n    return Array.isArray(d) ? d[1] : d.secondary || d.y;\n  },\n  getR: function getR(d) {\n    return Array.isArray(d) ? d[2] : d.radius || d.r;\n  },\n  getPrimaryAxisID: function getPrimaryAxisID(s) {\n    return s.primaryAxisID;\n  },\n  getSecondaryAxisID: function getSecondaryAxisID(s) {\n    return s.secondaryAxisID;\n  },\n  getSeriesStyle: function getSeriesStyle() {\n    return {};\n  },\n  getDatumStyle: function getDatumStyle() {\n    return {};\n  },\n  getSeriesOrder: function getSeriesOrder(d) {\n    return d;\n  },\n  onHover: function onHover() {},\n  groupMode: groupModePrimary,\n  showVoronoi: false\n};\nvar Chart$1 = useHooks(Chart);\nexport { Chart$1 as Chart };","map":null,"metadata":{},"sourceType":"module"}