"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("./util");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _default = {
  meta: {
    docs: {
      url: (0, _util.getDocsUrl)(__filename)
    },
    messages: {
      describe: 'describe should not have an empty title',
      test: 'test should not have an empty title'
    },
    schema: []
  },

  create(context) {
    return {
      CallExpression(node) {
        const is = {
          describe: (0, _util.isDescribe)(node),
          testCase: (0, _util.isTestCase)(node)
        };

        if (!is.describe && !is.testCase) {
          return;
        }

        const _node$arguments = _slicedToArray(node.arguments, 1),
              firstArgument = _node$arguments[0];

        if (!(0, _util.isString)(firstArgument)) {
          return;
        }

        if ((0, _util.isTemplateLiteral)(firstArgument) && (0, _util.hasExpressions)(firstArgument)) {
          return;
        }

        if ((0, _util.getStringValue)(firstArgument) === '') {
          context.report({
            messageId: is.describe ? 'describe' : 'test',
            node
          });
        }
      }

    };
  }

};
exports.default = _default;