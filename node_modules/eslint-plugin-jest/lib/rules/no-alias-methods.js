"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("./util");

var _default = {
  meta: {
    docs: {
      url: (0, _util.getDocsUrl)(__filename)
    },
    messages: {
      replaceAlias: `Replace {{ replace }}() with its canonical name of {{ canonical }}()`
    },
    fixable: 'code',
    schema: []
  },

  create(context) {
    // The Jest methods which have aliases. The canonical name is the first
    // index of each item.
    const methodNames = [['toHaveBeenCalled', 'toBeCalled'], ['toHaveBeenCalledTimes', 'toBeCalledTimes'], ['toHaveBeenCalledWith', 'toBeCalledWith'], ['toHaveBeenLastCalledWith', 'lastCalledWith'], ['toHaveBeenNthCalledWith', 'nthCalledWith'], ['toHaveReturned', 'toReturn'], ['toHaveReturnedTimes', 'toReturnTimes'], ['toHaveReturnedWith', 'toReturnWith'], ['toHaveLastReturnedWith', 'lastReturnedWith'], ['toHaveNthReturnedWith', 'nthReturnedWith'], ['toThrow', 'toThrowError']];
    return {
      CallExpression(node) {
        if (!(0, _util.expectCaseWithParent)(node)) {
          return;
        }

        let targetNode = (0, _util.method)(node);

        if (targetNode.name === 'resolves' || targetNode.name === 'rejects' || targetNode.name === 'not') {
          targetNode = (0, _util.method)(node.parent);
        }

        if (!targetNode) {
          return;
        } // Check if the method used matches any of ours


        const methodItem = methodNames.find(item => item[1] === targetNode.name);

        if (methodItem) {
          context.report({
            messageId: 'replaceAlias',
            data: {
              replace: methodItem[1],
              canonical: methodItem[0]
            },
            node: targetNode,
            fix: fixer => [fixer.replaceText(targetNode, methodItem[0])]
          });
        }
      }

    };
  }

};
exports.default = _default;