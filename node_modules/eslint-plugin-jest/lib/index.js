"use strict";

var _fs = require("fs");

var _path = require("path");

var snapshotProcessor = _interopRequireWildcard(require("./processors/snapshot-processor"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// copied from https://github.com/babel/babel/blob/d8da63c929f2d28c401571e2a43166678c555bc4/packages/babel-helpers/src/helpers.js#L602-L606

/* istanbul ignore next */
function interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function importDefault(moduleName) {
  return interopRequireDefault(require(moduleName)).default;
}

const rules = (0, _fs.readdirSync)((0, _path.join)(__dirname, 'rules')).filter(rule => rule !== '__tests__' && rule !== 'util.js').map(rule => (0, _path.basename)(rule, '.js')).reduce((acc, curr) => Object.assign(acc, {
  [curr]: importDefault(`./rules/${curr}`)
}), {});
let allRules = {};
Object.keys(rules).forEach(function (key) {
  allRules[`jest/${key}`] = 'error';
}); // eslint-disable-next-line import/no-commonjs

module.exports = {
  configs: {
    all: {
      plugins: ['jest'],
      env: {
        'jest/globals': true
      },
      rules: allRules
    },
    recommended: {
      plugins: ['jest'],
      env: {
        'jest/globals': true
      },
      rules: {
        'jest/no-alias-methods': 'warn',
        'jest/no-disabled-tests': 'warn',
        'jest/no-focused-tests': 'error',
        'jest/no-identical-title': 'error',
        'jest/no-jest-import': 'error',
        // 'jest/no-mocks-import': 'error',
        'jest/no-jasmine-globals': 'warn',
        'jest/no-test-prefixes': 'error',
        'jest/valid-describe': 'error',
        'jest/valid-expect': 'error',
        'jest/valid-expect-in-promise': 'error'
      }
    },
    style: {
      plugins: ['jest'],
      rules: {
        'jest/prefer-to-be-null': 'error',
        'jest/prefer-to-be-undefined': 'error',
        'jest/prefer-to-contain': 'error',
        'jest/prefer-to-have-length': 'error'
      }
    }
  },
  environments: {
    globals: {
      globals: {
        afterAll: false,
        afterEach: false,
        beforeAll: false,
        beforeEach: false,
        describe: false,
        expect: false,
        fit: false,
        it: false,
        jasmine: false,
        jest: false,
        pending: false,
        pit: false,
        require: false,
        test: false,
        xdescribe: false,
        xit: false,
        xtest: false
      }
    }
  },
  processors: {
    '.snap': snapshotProcessor
  },
  rules
};